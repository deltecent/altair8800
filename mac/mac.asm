***************************************************************
;*           DIGITAL RESEARCH MACRO ASSEMBLER VER 2.0
;*
;*  RECONSTRUCTED FROM MAC.COM MEMORY IMAGE AND ASM SOURCE CODE
;*          ON JANUARY 17, 2020 BY PATRICK A. LINSTRUTH
;*
;*                    PATRICK@DELTECENT.COM
;*
;***************************************************************

;	COPYRIGHT (C) 1977,1978,1979
;	DIGITAL RESEARCH
;	BOX 579, PACIFIC GROVE
;	CALIFORNIA, 93950

	TITLE	'MAC COMMON DATA AREA'
;
;	COMMON DATA FOR CP/M MACRO ASSEMBLER MODULE
BOOT	EQU	0000H	;REBOOT LOCATION
FBASE	EQU	0006H	;
FCB	EQU     5CH     ;FILE CONTROL BLOCK ADDRESS
BUFF	EQU	80H	;IO BUFFER AND COMMAND LINE STORAGE
BSIZE	EQU	128	;IO BUFFER SIZE
FNM	EQU     1       ;FCB POSITION OF FILE NAME
FNML	EQU     8       ;FCB FILE NAME LENGTH

;	DOS ENTRY POINTS
BDOS	EQU	0005H	;BDOS ENTRY POINT
READC	EQU	1	;READ CONSOLE DEVICE
WRITC	EQU	2	;WRITE CONSOLE DEVICE
WRITP	EQU	5	;WRITE PRINTER
REDYC	EQU	11	;CONSOLE CHARACTER READY
SELECT	EQU	14	;SELECT DISK SPECIFIED BY REGISTER E
OPENF	EQU	15	;OPEN FILE
CLOSF	EQU	16	;CLOSE FILE
DELEF	EQU	19	;DELETE FILE
READF	EQU	20	;READ FILE
WRITF	EQU	21	;WRITE FILE
MAKEF	EQU	22	;MAKE A FILE
CSEL	EQU	25	;RETURN CURRENTLY SELECTED DISK
SETDM	EQU	26	;SET DMA ADDRESS

;	ASCII CHARACTERS
TAB	EQU	009H	;TAB
CR	EQU	00DH	;CARRIAGE RETURN
LF	EQU	00AH	;LINE FEED
FF	EQU	00CH	;FORM FEED
EOF	EQU	01AH	;END OF FILE

;	BOOLEANS
FALSE	EQU	0
TRUE	EQU	NOT FALSE

;
;	FILE AND BUFFERING PARAMETERS
;
NSB	EQU	8	;NUMBER OF SOURCE FILE BUFFERS
NPB	EQU	6	;NUMBER OF PRINT FILE BUFFERS
NHB	EQU	6	;NUMBER OF HEX FILE BUFFERS

SSIZE	EQU	NSB*128
PSIZE	EQU	NPB*128
HSIZE	EQU	NHB*128

ENDAS0M	EQU	($ AND 0FF00H)+100H

;***************************************************************

	TITLE	'ASM MAIN MODULE'
;	CP/M RESIDENT ASSEMBLER MAIN PROGRAM

	ORG	00100H

;	TOKEN TYPES
IDEN	EQU	1	;IDENTIFIER
NUMB	EQU	2	;NUMBER
STRNG	EQU	3	;STRING
SPECL	EQU	4	;SPECIAL CHARACTER
TOKEN5	EQU	5	;UNKNOWN
COMM	EQU	6	;COMMENT
;
PLABT	EQU	0001B	;PROGRAM LABEL
DLABT	EQU	0010B	;DATA LABEL
EQUT	EQU	0100B	;EQUATE
SETT	EQU	0101B	;SET
MACT	EQU	0110B	;MACRO
UNDT	EQU	0111B	;UNKNOWN
;
EXTT	EQU	1000B	;EXTERNAL
REFT	EQU	1011B	;REFER
GLBT	EQU	1100B	;GLOBAL
;
BINV	EQU	2
OCTV	EQU	8
DECV	EQU	10
HEXV	EQU	16

	JMP	START

	DB	' COPYRIGHT (C) 1977 DIGITAL RESEARCH '

START:
	LXI	SP,ENDMAC
;
;	MAIN STATEMENT PROCESSING LOOP
	XRA	A
	STA	PASS	;SET TO PASS 0 INITIALLY
	STA	L305A
	CALL	INITIO	;INITIALIZE IO MODULE
	CALL	INISYE	;INITIALIZE THE SYMBOL TABLE
	LXI	H,0
	SHLD	L11D6H	;SET TO ZERO
RESTART:
	CALL	S1C4BH
	XRA	A
	STA	L2EA3H
	MVI	A,0
	STA	L2EA4H
	LHLD	SYMAX
	SHLD	L2F24H
	CALL	INITSE
	CALL	S2583H
	LXI	H,0
	SHLD	SYLAB	;ASSUME NO STARTING LABEL
	SHLD	L11DEH
	LDA	PARMR
L0162H:
	ORA	A
	JZ	INIPC	;NO 'R' PARAMETER
	LXI	H,0100H	;SET PC TO 0100H
;
INIPC:	;INITIALIZE PC
	SHLD	FPC
	SHLD	ASPC
	SHLD	EPC	;END PC
	XRA	A
	STA	IFCNT	;CLEAR IF NEST COUNT
;
SCNEXT:	;SCAN NEXT INPUT ITEM
	CALL	SCANE
;
SCN0:
	LDA	TOKEN
	CPI	NUMB	;SKIP LEADING NUMBERS FROM LINE EDITORS
	JZ	SCNEXT
	CPI	SPECL	;MAY BE PROCESSOR TECH'S COMMENT
	JNZ	SCN1
;	SPECIAL CHARACTER, CHECK FOR $,-,+,*
	LDA	ACCUM
	CPI	'$'
	JNZ	CHEND
	CALL	SETLA
	JNZ	STERR
	LDA	NEXTC
	MVI	B,0
	CPI	'-'
	JZ	L01ACH
	MVI	B,3
	CPI	'+'
	JZ	L01ACH
	MVI	B,7
	CPI	'*'
	JNZ	STERR	;ERROR IF NOT *
;
L01ACH:
	PUSH	B
	CALL	SCANE
	POP	B
	LDA	NEXTC
	LXI	H,PARMM
	CPI	'M'
	JZ	L01C4H
	LXI	H,L3066
	CPI	'P'
	JNZ	STERR
;
L01C4H:
	MOV	M,B
	CALL	SCANE
	JMP	POEND
SCN1:	;NOT NUMBER OR SPECIAL CHARACTER, CHECK FOR IDENTIFIER
	CPI	IDEN
	JNZ	STERR	;ERROR IF NOT

	CALL	BGETE
	JZ	CHKPT
	CALL	LOOKUPE
	CALL	FOUNDE
	JNZ	L01ECH
	CALL	ENTERE
	LDA	PASS
	ORA	A
	CNZ	ERRP
	JMP	L03E9H
;
L01ECH:
	CALL	GETTYE
	CPI	MACT
	JNZ	L03E9H
	LXI	H,0
	SHLD	L11E0H
	LDA	PASS
	ORA	A
	JZ	L020FH
;
L0201H:
	CALL	GETVALE
	XCHG
	LHLD	SYADR
	MOV	A,L
	SUB	E
	MOV	A,H
	SBB	D
	JC	L023CH
;
L020FH:
	CALL	S0272H
	CALL	S160CH
	CALL	S02AAH
	JNZ	L02C1H
	LHLD	SYLAB
	MOV	A,H
	ORA	L
	CNZ	ERRS
	LDA	PASS
	ORA	A
	JNZ	L025FH
	CALL	S0291H
	CALL	S1C48H
	CALL	ENTERE
	LHLD	SYADR
	SHLD	SYLAB
	JMP	SMACRO
;
L023CH:
	LHLD	SYADR
	SHLD	L11E0H
	CALL	S1C45H
	CALL	FOUNDE
	JZ	L0256H
	CALL	GETTYE
	CPI	006H
	JNZ	L02BBH
	JMP	L0201H
L0256H:
	CALL	S160CH
	CALL	S02AAH
	JNZ	L02BBH
L025FH:
	LHLD	L11E0H
	XCHG	
	LHLD	L11D8H
	CALL	COMPDH
	JNZ	L02BBH
	SHLD	SYLAB
	JMP	SMACRO
S0272H:
	LHLD	SYTOP
	PUSH	H
	SHLD	L3058	;SYMAC = SYTOP
	LXI	H,ACCLEN
	MOV	C,M
	MOV	B,C
L027EH:
	INX	H
	MOV	A,M
	PUSH	B
	PUSH	H
	CALL	S1C27H
	POP	H
	POP	B
	DCR	C
	JNZ	L027EH
	POP	H
	MOV	M,B
	SHLD	SYTOP
	RET
S0291H:
	LHLD	SYTOP
	MOV	C,M
	SHLD	L3058
	LXI	H,ACCLEN
	MOV	M,C
L029CH:
	INX	H
	PUSH	B
	PUSH	H
	CALL	S1C2AH
	POP	H
	POP	B
	MOV	M,A
	DCR	C
	JNZ	L029CH
	RET
S02AAH:
	LDA	TOKEN
	CPI	TOKEN5	;INVALID TOKEN?
	RNZ		;NO
	CALL	BGETE
	RNZ	
	CPI	EOF
	RNZ	
	MOV	A,B
	CPI	TAB
	RET
L02BBH:
	CALL	ERRP
	JMP	CHEND
L02C1H:
	LHLD	SYADR
	PUSH	H
	CALL	FILAB
	LHLD	ASPC
	LDA	PARMM
	ORA	A
	CZ	PADDR
	POP	H
	SHLD	SYADR
	CALL	S1C1EH
	STA	L11C2H
	LHLD	SYMAX
	PUSH	H
	ORA	A
	JZ	L0372H
	JMP	L0300H
;
SCCRT:	;TEST FOR SEMI-COLON OR CR
	CPI	';'
	RZ
	CPI	CR
	RZ
;
LFEET:	;TEST FOR LF, EOF, OR EXCLAMATION
	CPI	LF
	RZ
	CPI	EOF
	RZ
	CPI	'!'
	RET
;
L02F6H:
	LDA	L11C2H
	ORA	A
	JZ	L0372H
	CALL	S160CH
;
L0300H:
	LDA	TOKEN
	CPI	SPECL
	JNZ	L0346H
	LDA	ACCUM
	CALL	SCCRT
	JZ	L0365H
	CPI	'%'	;EVALUATE 16BIT VALUE
	JNZ	L033BH
	CALL	EXP16
	SHLD	NEVAL
	MVI	A,TRUE
	STA	L11DBH
	LDA	TOKEN
	CPI	SPECL
	JNZ	L0362H
	LDA	ACCUM
	PUSH	PSW
	XRA	A
	STA	ACCLEN	;RESET ACCUMULATOR
	CALL	L0D0EH
	CALL	S03DBH
	POP	PSW
	JMP	L0357H
;
L033BH:
	CPI	','
;
L033DH:
	JNZ	L0346H
	CALL	S03D7H
	JMP	L02F6H
;
L0346H:
	CALL	S03DBH
	CALL	SCANE
	LDA	TOKEN
	CPI	SPECL
	JNZ	L0362H
	LDA	ACCUM
;
L0357H:
	CALL	SCCRT
	JZ	L0365H
	CPI	','
	JZ	L02F6H
;
L0362H:
	CALL	ERRS
;
L0365H:
	LDA	L11C2H
	ORA	A
	JZ	L0372H
	CALL	S03D7H
	JMP	L0365H
;
L0372H:
	LHLD	L3058
	INX	H
	PUSH	H
;
L0377H:
	LXI	H,NEXTC
	MOV	A,M
	CALL	LFEET	;TEST FOR LF, EOF, OR EXCLAMATION
	JZ	L0387H	;YES
	CALL	SCANE
	JMP	L0377H
;
L0387H:
	XRA	A
	MOV	M,A
	STA	L2F14H
	CALL	S03ACH
	LDA	IFCNT
	STA	L2F54H
	CALL	S1C2DH
	POP	H
	SHLD	L2EF4H
	POP	H
	SHLD	L2F24H
	XRA	A
	STA	L2F14H
	MVI	A,1
	STA	L2EA4H
	JMP	SCNEXT
S03ACH:
	LDA	L2EA3H
	ORA	A
	JZ	L03B8H
	LXI	H,CBUFF+5
	MVI	M,'+'
;
L03B8H:
	CALL	S2595H
	MVI	A,16	;START OF SOURCE LINE
	STA	CBP
	RET	
;
L03C1H:
	LDA	L2EA3H
	ORA	A
	JZ	ERRB
	LDA	L2EA4H
	CPI	3
	RNC 
	CPI	1
	RZ
	CALL	S1C30H
	JMP	L03C1H
S03D7H:
	XRA	A
	STA	ACCLEN
S03DBH:
	CALL	S1C39H
	CALL	S1C24H
	CALL	S1C3CH
	LXI	H,L11C2H
	DCR	M
	RET
;
L03E9H:
	LHLD	SYLAB
	MOV	A,L
	ORA	H
	CNZ	ERRL
	LHLD	SYADR
	SHLD	SYLAB
	CALL	SCANE
	LDA	TOKEN
	CPI	SPECL
	JNZ	SCN0
	LDA	ACCUM
	CPI	':'
	JNZ	SCN0
	JMP	SCNEXT
;
;       BINARY SEARCH FOUND SYMBOL, CHECK FOR PSEUDO OR REAL OP
CHKPT:
	CPI	PT
	JNZ	CHKOT
;
;       PSEUDO OPCODE FOUND, BRANCH TO CASES
	MOV	E,B
	MVI	D,0
	DCX	D
	LXI	H,PTTAB
	DAD	D
	DAD	D
	MOV	E,M
	INX	H
	MOV	H,M
	MOV	L,E
	PCHL

PTTAB:	;PSEUDO OPCODE JUMP TABLE
	DW	SDB
	DW	SDS
	DW	SDW
	DW	SEND
	DW	SENDIF
	DW	SENDM
	DW	SEQU
	DW	SIF
	DW	SMACRO
	DW	SORG	
	DW	SSET
	DW	STITLE
	DW	SELSE
	DW	SIRP
	DW	SIRPC
	DW	SREPT
	DW	SASEG
	DW	SCSEG
	DW	SDSEG
	DW	SNAME
	DW	SPAGE
	DW	SEXITM
	DW	SEXTRN
	DW	SLOCAL
	DW	SINPAGE
	DW	SMACLIB
	DW	SPUBLIC
	DW	SSTKLN
;
SDB:
	CALL	FILAB	;SET LABEL FOR THIS LINE TO ASPC
SDB0:
	CALL	SCANE	;PAST DB TO NEXT ITEM
	LDA	TOKEN	;LOOK FOR LONG STRING
	CPI	STRNG
	JNZ	SDBC	;SKIP IF NOT STRING
	LDA	ACCLEN
	DCR	A	;LENGTH 1 STRING?
	JZ	SDBC
;	LENGTH 0,2 STRING
	MOV	B,A
	INR	B
	INR	B	;BECOMES 1,3,... FOR 0,2,... LENGTHS
	LXI	H,ACCUM	;ADDRESS CHARACTERS IN STRING
SDB1:	DCR	B	;COUNT DOWN TO ZERO
	JZ	SDB2	;SCAN DELIMETER AT END OF STRING
	PUSH	B	;SAVE COUNT
	MOV	B,M	;GET CHARACTER
	INX	H	;H,L TO NEXT CHARACTER
	PUSH	H	;SAVE ACCUM POINTER
	CALL	FILHB	;SEND TO HEX FILE
	POP	H
	POP	B
	JMP	SDB1
SDB2:
	CALL	SCANE	;TO THE DELIMETER
	JMP	SDB3
;
;	NOT A LONG STRING
SDBC:	CALL	OPANDE	;COMPUTER OPERAND
	LHLD	EVALUE	;VALUE TO H,L
	CALL	HL2A
	MOV	B,L	;SAVE TO HEX FILE
	CALL	FILHB
SDB3:	;END OF ITEM - UPDATE ASPC
	CALL	SETAS	;SET ASPC TO FPC
	CALL	DELIM
	CPI	','
	JZ	SDB0	;FOR ANOTHER ITEM
	JMP	CHEND	;CHECK END OF LINE SYNTAX
;
SDS:
	CALL	FILAB	;HANDLE LABEL IF IT OCCURRED
	CALL	PADD	;PRINT ADDRESS
	CALL	EXP16	;SCAN AND GET 16BIT OPERAND
	XCHG		;TO D,E
	LHLD	ASPC	;CURRENT PSEUDO PC
	DAD	D	;+ EXPRESSION
	SHLD	ASPC	;SAVE ASPC
	SHLD	FPC	;NEXT TO FILL
	JMP	CHEND

SDW:
	CALL	FILAB	;HANDLE OPTIONAL LABEL
SDW0:
	CALL	EXP16	;GET 16BIT OPERAND
	PUSH	H	;SAVE A COPY
	MOV	B,L	;LOW BYTE FIRST
	CALL	FILHB	;SEND LOW BYTE
	POP	H	;RECLAIM A COPY
	MOV	B,H	;HIGH BYTE NEXT
	CALL	FILHB	;SEND HIGH BYTE
	CALL	SETAS	;SET ASPC=FPC
	CALL	DELIM	;CHECK DELIMETER SYNTAX
	CPI	','
	JZ	SDW0	;GET MORE DATA
	JMP	CHEND
;
SEND:
	CALL	FILAB	;HANDLE OPTIONAL LABEL
	CALL	PADD	;WRITE LAST LOC
	LDA	CBUFF
	CPI	' '
	JNZ	CHEND
	CALL	EXP16	;GET EXPRESSION OF IT'S THERE
	LDA	CBUFF
	CPI	' '
	JNZ	SEND0
	SHLD	EPC	;EXPRESSION FOUND, STORE IT FOR LATER
SEND0:	MVI	A,' '
	STA	CBUFF	;CLEAR ERROR IF IT OCCURRED
	LDA	IFCNT
	ORA	A
	CNZ	ERRB
	CALL	SCANE	;CLEAR CR
	LDA	TOKEN
	CPI	SPECL
	JNZ	STERR
	LDA	ACCUM
	CPI	LF
	JNZ	STERR
	JMP	ENDAS	;END OF ASSEMBLER

SENDIF:
	CALL	FILAB
	CALL	S09B2H
	JMP	POEND

SENDM:
	PUSH	B
	CALL	FILAB
	CALL	L03C1H
	LXI	H,CBUFF+5	;AFTER PC
	MVI	M,'+'	;MARK STATEMENT AS MACRO
	LDA	L2EA4H
	CPI	3
	JNC	L053BH
	POP	B
	CALL	S1C3FH
	JMP	L0616H
;
L053BH:
	LHLD	L2F24H
	PUSH	H
	LHLD	L2EB4H	;SOME 32-BYTE BUFFER
	SHLD	L2F24H
	CALL	S1C3FH
	POP	H
	SHLD	L2F24H
	POP	PSW
	CPI	006H
	JNZ	L0616H
;
L0552H:
	LDA	L2EA4H
	CPI	6
	JNZ	L056CH
	LHLD	L2EB4H	;SOME 32-BYTE BUFFER
	MOV	E,M
	INX	H
	MOV	D,M
	MOV	A,E
	ORA	D
	JZ	L0616H	;NULL VALUE?
	DCX	D
	MOV	M,D
	DCX	H
	MOV	M,E
	JMP	L0635H
;
L056CH:
	LHLD	L2EB4H	;SOME 32-BYTE BUFFER
	MOV	E,M
	INX	H
	MOV	D,M
	LDAX	D
	CPI	CR
	JZ	L0616H
	ORA	A
	JZ	L0593H
	LDA	L2EA4H
	CPI	3
	JNZ	L05A0H
	LDAX	D
	INX	D
	MOV	M,D
	DCX	H
	MOV	M,E
	LXI	H,ACCLEN
	MVI	M,001H
	INX	H
	MOV	M,A
	JMP	L059AH
;
L0593H:
	MVI	A,CR
	STAX	D
	XRA	A
	STA	ACCLEN
;
L059AH:
	CALL	S1C39H
	JMP	L0606H
;
L05A0H:
	LXI	H,L2F65H
	MOV	A,M
	PUSH	PSW
	MVI	M,000H
	LXI	H,NEXTC
	MOV	A,M
	PUSH	PSW
	MVI	M,000H
	XCHG
	SHLD	L2EF4H
	MOV	A,M
	SUI	02CH
	JNZ	L05C5H
	INX	H
	PUSH	H
	LXI	H,ACCLEN
	MOV	M,A
	CALL	S1C39H
	POP	H
	JMP	L05F0H
;
L05C5H:
	PUSH	H
	CALL	S160CH
	POP	D
	CALL	S11E4H
	JMP	L05D0H
;
L05D0H:
	CALL	S1C39H
	LHLD	L2EF4H
	MOV	A,M
	ORA	A
	JNZ	L05E0H
	MVI	M,CR
	JMP	L05F7H
;
L05E0H:
	LHLD	L11E2H
	PUSH	H
	CALL	SCANE
	LDA	ACCUM
	CPI	','
	CNZ	ERRS
	POP	H
;
L05F0H:
	CALL	S11EEH
	XRA	A
	STA	L2F66H
;
L05F7H:
	XCHG
	LHLD	L2EB4H	;SOME 32-BYTE BUFFER
	MOV	M,E
	INX	H
	MOV	M,D
	POP	PSW
	STA	NEXTC
	POP	PSW
	STA	L2F65H
;
L0606H:
	LHLD	L2EB4H	;SOME 32-BYTE BUFFER
	INX	H
	SHLD	L3058
	CALL	S1C24H
	CALL	S1C3CH
	JMP	L0635H
;
L0616H:
	CALL	S03ACH
	LHLD	L2F24H
	SHLD	SYMAX	;SAVE IN SYMAX
	CALL	S1C30H
	LDA	L2F54H
	STA	IFCNT
	LDA	L2F14H
	STA	NEXTC
	ORA	A
	CNZ	S1609H
	JMP	SCNEXT
;
L0635H:
	MVI	A,16	;START OF SOURCE LINE
	STA	CBP
	LHLD	L2ED4H
	SHLD	L2EF4H
	XRA	A
	STA	NEXTC
	JMP	SCNEXT
;
PASPC:	;GET 16BIT OPERAND, PRINT IT, UDPATE CBUFF+6
	PUSH	PSW
	LHLD	ASPC	;HOLD TEMP ASPC
	PUSH	H	;IN STACK
	CALL	EXP16	;GET 16BIT OPERAND
	SHLD	ASPC	;VALUE OF EXPRESSION
	CALL	PADDR	;COMPUTED VALUE
	POP	H	;REAL ASPC
	SHLD	ASPC
	POP	PSW
	LXI	H,CBUFF+6	;SPACE AFTER VALUE
	MOV	M,A
	RET
;
SEQU:
	CALL	SETLA
	JZ	STERR	;MUST BE A LABEL
	MVI	A,'='	;EQU
	CALL	PASPC	;VALUE IN EVALUE
	LHLD	ASPC	;HOLD TEMP ASPC
	PUSH	H	;IN STACK
	LHLD	EVALUE
	SHLD	ASPC
	CALL	FILAB
	POP	H	;REAL ASPC
	SHLD	ASPC
	JMP	CHEND
;
SIF:
	CALL	FILAB	;IN CASE OF LABEL
	CALL	EXP16	;GET 'IF' EXPRESSION, VALUE IN H,L
	LDA	CBUFF
	CPI	' '
	JNZ	L08C1H	;ERROR?
	MOV	A,L
	RAR
	MVI	A,1	;IF
	JNC	L08C1H
	CALL	S099EH
	JMP	CHEND
;
SMACRO:
	CALL	SETLA
	JNZ	SMAC0
	CALL	ERRL
	JMP	CHEND
SMAC0:
	LDA	PASS
	ORA	A	;
	JZ	SMAC2	;JMP IF PASS 0
;	PASS 1
	LHLD	SYADR
	XCHG	
	LHLD	L11D8H
	CALL	COMPDH
	JZ	SMAC1
	CALL	ERRP
	JMP	SMAC3
SMAC1:
	CALL	GETVALE
	SHLD	L11D8H
	JMP	SMAC3
SMAC2:
	MVI	A,MACT	;MACRO TYPE
	CALL	SETTYE
SMAC3:
	XRA	A
	STA	L11DAH
	LDA	PASS
	ORA	A
	CZ	S1C1BH
SMAC4:
	CALL	SCANE
	LDA	TOKEN
	CPI	IDEN
	JNZ	SMAC5
	LDA	PASS
	ORA	A
	CZ	S1C21H
	LXI	H,L11DAH
	INR	M
	CALL	SCANE
	LDA	TOKEN
	CPI	SPECL
	JNZ	SMAC5
	LDA	ACCUM
	CPI	','
	JZ	SMAC4
SMAC5:
	MVI	A,1
	CALL	S0722H
	JZ	L0E34H
	LDA	PASS
	ORA	A
	LDA	L11DAH
	CZ	S1C1BH
	JMP	POEND
S0716H:
	CPI	009H
	RZ	
	CPI	010H
	RZ	
	CPI	00EH
	RZ	
	CPI	00FH
	RET	
;
S0722H:
	STA	0305CH
;
L0725H:
	LDA	TOKEN
	CPI	SPECL
	JNZ	L073DH
	LDA	ACCUM
	CPI	CR
	JZ	L0746H
	CPI	'!'
	JZ	L0746H
	CPI	EOF
	RZ	
;
L073DH:
	CALL	ERRS
	CALL	SCANE
	JMP	L0725H
;
L0746H:
	LHLD	L3058
	SHLD	L3060
	MVI	A,1
	STA	L305A
	CALL	SCANE
;
L0754H:
	LHLD	L3058
	SHLD	L11E0H
	CALL	SCANE
	LDA	TOKEN
	CPI	SPECL
	JNZ	L076BH
	LDA	ACCUM
	CPI	EOF
	RZ	
;
L076BH:
	CPI	IDEN
	JNZ	L0754H
	CALL	BGETE
	JNZ	L0754H
	PUSH	PSW
	LDA	0305CH
	CPI	1
	JNZ	L07A6H
	LDA	PASS
	ORA	A
	JNZ	L07A6H
	LDA	ACCLEN
	DCR	A
	JZ	L07A6H
	DCR	C
	JZ	L07A6H
	PUSH	B
	LHLD	L11E0H
	SHLD	L3058
	CALL	S2109H
	CALL	S1C27H
	LDA	NEXTC
	ORA	A
	CNZ	S1C27H
	POP	B
;
L07A6H:
	POP	PSW
	CPI	EOF
	JNZ	L0754H
	MOV	A,B
	CALL	S0716H
	JNZ	L07BBH
	LXI	H,L305A
	INR	M
	RZ	
	JMP	L0754H
;
L07BBH:
	CPI	006H
	JNZ	L0754H
	LXI	H,L305A
	DCR	M
	JNZ	L0754H
	LDA	0305CH
	CPI	1
	JNZ	L07F6H
	LXI	H,0
	SHLD	SYLAB
	LDA	MLFLG
	ORA	A
	JZ	L07E5H
	LXI	H,0
	CALL	SETVALE
	JMP	L07F1H
;
L07E5H:
	LHLD	L11D6H
	CALL	SETVALE
	LHLD	SYADR
	SHLD	L11D6H	;11D6 = SYADR
;
L07F1H:
	LDA	PASS
	ORA	A
	RNZ	
;
L07F6H:
	LHLD	L3058
	MOV	A,M
	CPI	CR
	CNZ	ERRS
	LHLD	L3058
	MVI	M,CR
	XRA	A
	CALL	S1C27H
	XRA	A
	INR	A
	RET	

SORG:
	CALL	EXP16
	LDA	CBUFF
	CPI	' '
	JNZ	CHEND	;SKIP OR IF ERROR
	LDA	PARMR	;'R' PARAMETER?
	ORA	A
	JZ	SETPC
	LXI	D,0100H	;ADD 0100H TO ORG
	DAD	D
;
SETPC:
	SHLD	ASPC	;CHANGE PC
	SHLD	FPC	;CHANGE NEXT TO FILL
	CALL	FILAB	;IN CASE OF LABEL
	CALL	PADD
	JMP	CHEND
;
SSET:
	CALL	SETLA
	JZ	STERR	;MUST BE LABELED
	CALL	GETTYE
	ORA	A	;IS TYPE UNDEFINED?
	JZ	SSET0	;SAVE SET VALUE
	CPI	SETT	;ERROR IF NOT SET TYPE
	CNZ	ERRL	;LABEL ERROR
;
SSET0:
	MVI	A,SETT
	CALL	SETTYE
	MVI	A,'#'	;SET
	CALL	PASPC
	CALL	SETLA
	LHLD	EVALUE
	CALL	SETVALE
	LXI	H,0
	SHLD	SYLAB
	JMP	CHEND

STITLE:
	CALL	FILAB
	CALL	SCANE
	LDA	TOKEN
	CPI	STRNG
	JNZ	STERR
	LDA	L305A
	ORA	A
	JNZ	STERR
	LXI	H,ACCLEN
	MOV	C,M
	XCHG
	LHLD	SYTOP
	LDA	PASS
	ORA	A
	JNZ	L089FH
	SHLD	L3062
	DCX	H
	SHLD	L3058
;
L0889H:
	MOV	A,C
	ORA	A
	JZ	L089BH
	INX	D
	LDAX	D
	DCR	C
	PUSH	D
	PUSH	B
	CALL	S1C27H
	POP	B
	POP	D
	JMP	L0889H
;
L089BH:
	XRA	A
	CALL	S1C27H
;
L089FH:
	JMP	POEND

SELSE:
	CALL	FILAB
	CALL	S09B2H
	CPI	1
	MVI	A,2
	JZ	L08C1H
	CALL	ERRB
	JMP	POEND

S08B5H:
	CPI	009H
	RZ
	CPI	00EH
	RZ
	CPI	00FH
	RZ
	CPI	010H
	RET	
;
L08C1H:
	STA	L11CAH
	XRA	A
	STA	L11CBH
	STA	L11CCH
;
L08CBH:
	LDA	TOKEN
	CPI	SPECL
	JNZ	L08F1H
	LDA	ACCUM
	CPI	CR
	JNZ	L08E1H
	CALL	SCANE
	JMP	L08F7H
;
L08E1H:
	CPI	'!'
	JZ	L08F7H
	CPI	EOF
	JNZ	L08F1H
	CALL	ERRB
	JMP	ENDAS
;
L08F1H:
	CALL	SCANE
	JMP	L08CBH
;
L08F7H:
	CALL	SCANE
	LDA	TOKEN
	CPI	NUMB
	CZ	SCANE
	LDA	TOKEN
	CPI	1
	JNZ	L08CBH
	CALL	BGETE
	JZ	L0934H
	CALL	SCANE
	LDA	TOKEN
	CPI	SPECL
	JNZ	L0926H
	LDA	ACCUM
	CPI	03AH
	JNZ	L08CBH
	CALL	SCANE
;
L0926H:
	LDA	TOKEN
	CPI	IDEN
	JNZ	L08CBH
	CALL	BGETE
	JNZ	L08CBH
;
L0934H:
	CPI	EOF
	JNZ	L08CBH
	MOV	A,B
	CPI	008H
	JNZ	L0949H
	LXI	H,L11CBH
	INR	M
	CZ	ERRO
	JMP	L08CBH
;
L0949H:
	CPI	CR
	JNZ	L0965H
	LDA	L11CBH
	ORA	A
	JNZ	L08CBH
	LDA	L11CAH
	CPI	2	;ELSE
	CZ	ERRB
	MVI	A,2	;ELSE
	CALL	S099EH
	JMP	POEND
;
L0965H:
	CPI	005H
	JNZ	L097DH
	LXI	H,L11CBH
	MOV	A,M
	DCR	M
	ORA	A
	JNZ	L08CBH
	LDA	L11CCH
	ORA	A
	CNZ	ERRB
	JMP	POEND
;
L097DH:
	CALL	S08B5H
	JNZ	L098DH
	LXI	H,L11CCH
	INR	M
	CZ	ERRO
	JMP	L08CBH
;
L098DH:
	CPI	6
	JNZ	L08CBH
	LXI	H,L11CCH
	MOV	A,M
	DCR	M
	ORA	A
	JNZ	L08CBH
	JMP	SENDM
;
S099EH:
	MOV	B,A	;1=IF 2=ELSE
	LXI	H,IFCNT
	MOV	A,M
	CPI	8	;NESTING UP TO 8 DEEP
	JNC	ERRO	;ERROR
	INR	M	;IFCNT=INCNT+1
	MOV	E,A
	MVI	D,0
	LXI	H,IFSTK
	DAD	D	;H,L STACK INDEX
	MOV	M,B
	RET	
;
S09B2H:
	LXI	H,IFCNT
	MOV	A,M
	ORA	A
	JZ	ERRB	;BALANCED 'IF' ERROR
	DCR	M	;DECREMENT IF NEST COUNT
	MOV	E,M
	MVI	D,0
	LXI	H,IFSTK
	DAD	D
	MOV	A,M
	RET	

SIRP:
	MVI	A,5
	JMP	L09CBH

SIRPC:
	MVI	A,003H
;
L09CBH:
	STA	0305CH
	CALL	FILAB
	CALL	SCANE
	LDA	TOKEN
	CPI	IDEN
	JNZ	L0A4EH
	LHLD	SYTOP
	SHLD	L11C5H
	DCX	H
	SHLD	L3058
	LDA	ACCLEN
	CPI	010H
	JC	L09F0H
	MVI	A,010H
;
L09F0H:
	ADI	003H
	CALL	S1C27H
	XRA	A
	CALL	S1C27H
	CALL	S1C21H
	CALL	SCANE
	LDA	TOKEN
	CPI	SPECL
	JNZ	L0A4EH
	LDA	ACCUM
	CPI	','
	JNZ	L0A4EH
	CALL	S160CH
	LDA	ACCLEN
	ORA	A
	JNZ	L0A1FH
	CALL	SCANE
	JMP	L0A3EH
;
L0A1FH:
	CALL	CHKEND
	JZ	L0A3EH
	LXI	H,ACCLEN
	MOV	C,M
;
L0A29H:
	INX	H
	MOV	A,M
	PUSH	B
	PUSH	H
	CALL	S1C27H
	POP	H
	POP	B
	DCR	C
	JNZ	L0A29H
	MVI	A,CR
	CALL	S1C27H
	CALL	SCANE
;
L0A3EH:
	XRA	A
	CALL	S1C27H
	LHLD	SYTOP
	SHLD	SYADR
	LDA	0305CH
	JMP	L0A78H
;
L0A4EH:
	CALL	ERRS
	LDA	0305CH
	CALL	S0722H
	JMP	POEND

SREPT:
	CALL	EXP16
	PUSH	H
	MOV	A,L
	LHLD	SYTOP
	SHLD	L11C5H
	DCX	H
	SHLD	L3058
	CALL	S1C27H
	POP	PSW
	CALL	S1C27H
	LHLD	SYTOP
	SHLD	SYADR
	MVI	A,6
;
L0A78H:
	CALL	S0722H
	JZ	L0E34H
	CALL	S03ACH
	CALL	SCANE
	LDA	IFCNT
	STA	L2F54H
	LDA	NEXTC
	CPI	LF
	JNZ	L0A93H
	XRA	A
;
L0A93H:
	STA	L2F14H
	CALL	S1C2DH
	LHLD	SYMAX
	SHLD	L2F24H
;
L0A9FH:
	LHLD	L3058
	XCHG
	LXI	H,L11C5H
	MOV	A,E
	SUB	M
	INX	H
	MOV	A,D
	SBB	M
	XCHG
	JC	L0ABFH
	MOV	A,M
	DCX	H
	SHLD	L3058
	LHLD	SYMAX
	DCX	H
	SHLD	SYMAX
	MOV	M,A
	JMP	L0A9FH
;
L0ABFH:
	INX	H
	SHLD	SYTOP
	LHLD	SYMAX
	SHLD	L2EB4H
	NOP
	LDA	0305CH
	CPI	6
	JZ	L0ADDH
	MOV	C,M
	MVI	B,000H
	MOV	E,L
	MOV	D,H
	DAD	B
	XCHG
	MOV	M,E
	INX	H
;
L0ADBH:
	MOV	M,D
	DCX	H
;
L0ADDH:
	PUSH	H
	LHLD	SYADR
	XCHG	
	LHLD	L11C5H
	MOV	A,E
	SUB	L
	MOV	E,A
	MOV	A,D
	SBB	H
	MOV	D,A
	POP	H
	DAD	D
	SHLD	L2ED4H
	LDA	0305CH
	STA	L2EA4H
	JMP	L0552H

SASEG:
	JMP	NOTIMPL
SCSEG:
	JMP	NOTIMPL
SDSEG:
	JMP	NOTIMPL
SNAME:
	JMP	NOTIMPL
SPAGE:
	CALL	FILAB
	CALL	SCANE
	CALL	CHKEND
	JZ	L0B25H
	CALL	OPANDE
	LHLD	EVALUE
	LDA	CBUFF
	CPI	' '
	JNZ	CHEND
	CALL	S25AAH
	JMP	CHEND
;
L0B25H:
	CALL	S03ACH
	LDA	PASS
	ORA	A
	CNZ	S25ADH
	JMP	CHEND
SEXITM:
	JMP	SENDM
SEXTRN:
	JMP	NOTIMPL
SLOCAL:
	LDA	L2EA3H
	ORA	A
	JZ	L0BA2H
;
L0B3FH:
	CALL	SCANE
	LDA	TOKEN
	CPI	IDEN
	JNZ	L0BA2H
	LHLD	SYTOP
	PUSH	H
	DCX	H
	SHLD	L3058
	CALL	S1C21H
	XRA	A
	STA	L11DBH
	INR	A
	STA	ACCLEN
	LHLD	L11DEH
	INX	H
	SHLD	L11DEH
	SHLD	NEVAL
	CALL	L0D0EH
	LDA	0300AH
	CPI	030H
	CNZ	ERRO
	LXI	H,03F3FH
	SHLD	ACCUM
	CALL	S1C39H
	POP	H
	SHLD	SYTOP
	DCX	H
	SHLD	L3058
	CALL	S1C24H
	CALL	S1C3CH
	CALL	SCANE
	CALL	CHKEND
	JZ	CHEND
	LDA	TOKEN
	CPI	SPECL
	JNZ	L0BA2H
	LDA	ACCUM
	CPI	02CH
	JZ	L0B3FH
;
L0BA2H:
	CALL	ERRS
	JMP	CHEND
SINPAGE:
	JMP	NOTIMPL
SMACLIB:
	CALL	FILAB	;GET MACLIB FILENAME
	LHLD	L11D6H
	MOV	A,L
	ORA	H
	JNZ	SMACERR	;11D6 NOT ZERO
	LDA	MLFLG	;IF FALSE, PROBLEM
	ORA	A
	JNZ	SMACERR
	CALL	SCANE
	LDA	PASS
	ORA	A
	JNZ	POEND	;JUMP IF PASS 1
	LDA	TOKEN
	CPI	IDEN
	JNZ	SMACERR	;JUMP IF NOT IDENTIFIER
	CALL	OMACLBE
	LDA	PARML
	ORA	A
	CNZ	S25ADH
;
L0BD9H:
	CALL	SCANE
	LDA	TOKEN
	CPI	SPECL
	JNZ	L0BD9H
	LDA	ACCUM
	CPI	CR
	JZ	L0BF1H
	CPI	EOF
	JNZ	L0BD9H
;
L0BF1H:
	CALL	S03ACH
	CALL	S25A7H
	JMP	SCNEXT

SMACERR:
	CALL	ERRS
	JMP	CHEND

SPUBLIC:
	JMP	NOTIMPL
SSTKLN:
	JMP	NOTIMPL
NOTIMPL:
	CALL	ERRN
;
POEND:	;PSEUDO OPERATOR END - SCAN TO NEXT TOKEN
	CALL	SCANE
	JMP	CHEND
;
CHKEND:	;RETURN ZERO IF END CHARACTER
	LDA	TOKEN
	CPI	SPECL
	RNZ	
	LDA	ACCUM
	CPI	CR
	RZ	
	CPI	'!'
	RZ	
	CPI	';'
	RET	
;
CHKOT:	;CHECK OPCODE TABLE
	SUI	O1
	CPI	O15
	JNC	STERR
	MOV	E,A
	MVI	D,0
	LXI	H,OPTAB
	DAD	D
	DAD	D
	MOV	E,M
	INX	H
	MOV	H,M
	MOV	L,E
	PCHL	

OPTAB:	;OPCODE TABLE
	DW	SSIMP
	DW	SLXI
	DW	SDAD
	DW	SPUSH
	DW	SJMP
	DW	SMOV
	DW	SMVI
	DW	SACCI
	DW	SLDAX
	DW	SLHLD
	DW	SACCR
	DW	SINC
	DW	SINX
	DW	SRST
	DW	RSIN

SSIMP:
	CALL	FILHB
	CALL	SCANE
	JMP	INCPC
SLXI:
	CALL	SHDREG
	CALL	CHCOM
	CALL	SETADR
	JMP	INCPC
SDAD:
	CALL	SHDREG
	JMP	INCPC
SPUSH:
	CALL	SHREG	;SCAN SINGLE PRECISION REGISTER TO A
	CPI	111000B	;MAY BE PSW
	JZ	SPU0
;	NOT PSW, MUST BE B,D, OR H
	ANI	001000B	;LOW BIT MUST BE 0
	CNZ	ERRR	;REGISTER ERROR IF NOT
;
SPU0:	MOV	A,C	;RECALL REGISTER AND MASK IN CASE OF ERROR
	ANI	110000B
	ORA	B	;MASK IN OPCODE FOR PUSH OR POP
	JMP	FILINC	;FILL HEX VALUE AND INCREMENT PC
;
SJMP:	;JMP 16B/ CALL 16B
	CALL	FILHB	;EMIT JMP OR CALL OPCODE
	CALL	SETADR	;EMIT 16BIT OPERAND
	JMP	INCPC
;
SMOV:	;MOV A,B
	CALL	SHREG
	ORA	B	;MASK IN OPCODE
	MOV	B,A	;SAVE IN B TEMPORARILY
	CALL	CHCOM	;MUST BE COMMA SEPARATOR
	CALL	EXP3	;VALUE MUST BE 0-7
	ORA	B	;MASK IN OPCODE
	JMP	FILINC
;
SMVI:	;MOV A,8B
	CALL	SHREG
	ORA	B	;MASK IN OPCODE
	CALL	FILHEX	;EMIT OPCODE
	CALL	CHCOM	;SCAN COMMA
	CALL	SETBYTE	;EMIT 8BIT VALUE
	JMP	INCPC
;
SACCI:	;ADI 8B
	CALL	FILHB	;EMIT IMMEDIATE OPCODE
	CALL	SETBYTE	;EMIT 8BIT OPERAND
	JMP	INCPC
;
SLDAX:	;LDAX B/STAX D
	CALL	SHREG
	ANI	101000B	;MUST BE B OR D
	CNZ	ERRR	;REGISTER ERROR IF NOT
	MOV	A,C	;RECOVER REGISTER NUMBER
	ANI	010000B	;CHANGE TO B OR D IF ERROR
	ORA	B	;MASK IN OPCODE
	JMP	FILINC	;EMIT OPCODE
;
SLHLD:	;LHLD 16B/ SHLD 16B/ LDA 16B/ STA 16B
	CALL	FILHB	;EMIT OPCODE
	CALL	SETADR	;EMIT OPERAND
	JMP	INCPC
;
SACCR:	;ADD B
	CALL	EXP3	;RIGHT ADJUSTED 3BIT VALUE FOR REGISTER
	ORA	B	;MASK IN OPCODE
	JMP	FILINC
;
SINC:	;INR B/DCR D
	CALL	SHREG	;GET REGISTER
	ORA	B
	JMP	FILINC
;
SINX:	;INX H/DCX B
	CALL	SHREG
	ANI	001000B	;MUST BE B D M OR S
	CNZ	ERRR	;REGISTER ERROR IF NOT
	MOV	A,C	;RECOVER REGISTER
	ANI	110000B	;IN CASE OF ERROR
	ORA	B	;MASK IN OPCODE
	JMP	FILINC
;
SRST:	;RESTART 4
	CALL	SHREG	;VALUE IS 0-7
	ORA	B	;OPCODE MASKED
	JMP	FILINC
;
RSIN:	;IN 8B/OUT 8B
	CALL	FILHB	;EMIT OPCODE
	CALL	SETBYTE	;EMIT 8BIT OPERAND
	JMP	INCPC
;
FILINC:	;FILL HEX VALUE FROM A BEFORE INCREMENTING PC
	CALL	FILHEX
;
INCPC:	;CHANGE ASSEMBLER'S PSEUDO PROGRAM COUNTER
	CALL	FILAB
	CALL	SETAS
	JMP	CHEND

L0D04H:
        DB	010H,027H
	DB	0E8H,003H
	DB	064H,000H
	DB	00AH,000H
	DB	001H,000H

L0D0EH:
        MVI     B,5
        LXI H,L0D04H  

L0D13H:
	MOV	E,M
	INX	H
	MOV	D,M
	INX	H
	PUSH	H
	LHLD	NEVAL
	MVI	C,'0'
L0D1DH:
	MOV	A,L
	SUB	E
	MOV	L,A
	MOV	A,H
	SBB	D
	MOV	H,A
	JC	L0D2AH
	INR	C
	JMP	L0D1DH
L0D2AH:
	DAD	D
	SHLD	NEVAL
	LDA	L11DBH
	ORA	A
	JZ	L0D44H
	MOV	A,B
	DCR	A
	JZ	L0D44H
	MOV	A,C
	CPI	030H
	JZ	L0D50H
	XRA	A
	STA	L11DBH

L0D44H:
	LXI	H,ACCLEN
	MOV	E,M
	INR	M
	MVI	D,000H
	LXI	H,ACCUM
	DAD	D
	MOV	M,C
L0D50H:
	POP	H
	DCR	B
	JNZ	L0D13H
	RET	
DELIM:
	LDA	TOKEN
	CPI	SPECL
	CNZ	ERRD
	LDA	ACCUM
	CPI	','
	RZ
	CPI	';'
	RZ
	CPI	CR
	CNZ	ERRD
	RET
;
EXP16:	;GET 16BIT VALUE TO H,L
	PUSH	B
	CALL	SCANE	;GET OPERAND
	CALL	OPANDE	;PROCESS
	LHLD	EVALUE	;H,L = EVALUE
	POP	B
	RET
;
EXP8:	;GET 8BIT VALUE TO REG A
	CALL	EXP16
;
HL2A:	;STORE 8BIT VALUE FROM H,L IN REG-A
	MOV	A,H	;A=H
	ORA	A	;SET ZERO FLAG
	MOV	A,L	;A=L
	RZ		;RETURN OF H=0
	INR	H	;H=H+1
	JNZ	MERRV	;'V' ERROR IF H WAS 01-FE
	ORA	A
	RM		;RETURN IF MINUS

MERRV:
	CALL	ERRV
	MOV	L,A
	RET	

EXP3:
	CALL	EXP8
	CPI	008H
	CNC	ERRV
	ANI	007H
	RET	
SHREG:
	CALL	EXP3
	RAL
	RAL
	RAL
	ANI	038H
	MOV	C,A
	RET	
SHDREG:
	CALL	SHREG
	ANI	008H
	CNZ	ERRR
	MOV	A,C
	ANI	030H
	ORA	B
	JMP	FILHEX
SETBYTE:
	CALL	EXP8
	JMP	FILHEX
SETADR:
	CALL	EXP16
	JMP	FILADR
CHCOM:
	PUSH	PSW
	PUSH	B
	LDA	TOKEN
	CPI	SPECL
	JNZ	COMER
	LDA	ACCUM
	CPI	','
	JZ	COMRET	
COMER:
	MVI	A,'C'
	CALL	PERR

COMRET:
	POP	B
	POP	PSW
	RET	
;
CHEND:	;END OF LINE CHECK
	CALL	FILAB
	LDA	TOKEN
	CPI	SPECL
	JNZ	STERR
	LDA	ACCUM
	CPI	CR
	JNZ	CHEN0
	CALL	SCANE
	JMP	SCNEXT
CHEN0:
	CPI	';'
	JNZ	CHEN2
	CALL	FILAB
CHEN1:
	CALL	SCANE
	LDA	TOKEN
	CPI	SPECL
	JNZ	CHEN1
	LDA	ACCUM
	CPI	LF
	JZ	SCNEXT
	CPI	EOF
	JZ	ENDAS
	CPI	'!'
	JZ	SCNEXT
	JMP	CHEN1
CHEN2:
	CPI	'!'
	JZ	SCNEXT
	CPI	EOF
	JZ	ENDAS

STERR:
	CALL	ERRS
	JMP	CHEN1
DIFF:
	MOV	A,E
	SUB	L
	MOV	L,A
	MOV	A,D
	SBB	H
	MOV	H,A
	RET
;
ENDAS:	;END OF ASSEMBLY FOR THIS PASS
	LDA	L2EA3H
	ORA	A
	JZ	L0E37H
L0E34H:
	CALL	ERRB	;UNBALANCED MACROS
L0E37H:
	XRA	A
	STA	L305A
	LXI	H,PASS
	MOV	A,M
	INR	M	;PASS NUMBER INCREMENTED
	ORA	A
	JNZ	L0E6CH
	LXI	H,TRUE
	SHLD	L11D8H

L0E4AH:
	LHLD	L11D6H	;H,L = 11D6
	MOV	A,H
	ORA	L
	JZ	RESTART	;IF 0, RESTART
	SHLD	SYADR	;SYADR = 11D6
	PUSH	H	;SAVE SYADR
	CALL	GETVALE	;VALUE IN H,L
	XTHL		;VALUE IN SP, SYSADR IN H,L
	PUSH	H	;SAVE SYSADR
	LHLD	L11D8H
	CALL	SETVALE
	POP	H	;H,L = SYADR
	SHLD	L11D8H	;SAVE SYADR IN 11D8
	POP	H	;H,L = VALUE
	SHLD	L11D6H	;SAVE VALUE IN 11D6
	JMP	L0E4AH

L0E6CH:
	CALL	SCANE
	CALL	PADD

	LXI	H,CBUFF+5
	MVI	M,CR
	LXI	H,CBUFF+1
	CALL	PCONE

	LDA	PARMS
	ORA	A
	JZ	L0E8FH
	MVI	A,1
	STA	L2EA4H
	CALL	S25A1H
	CALL	S0FB1H

;
;	COMPUTE REMAINING SPACE
L0E8FH:
	LHLD	SYTOP
	XCHG
	LHLD	SYBASE
	CALL	DIFF	;DIFFERENCE TO H,L
	PUSH	H	;SYTOP-SYBAS TO STACK
	LHLD	SYMAX
	XCHG
	LHLD	SYBASE
	CALL	DIFF	;SYMAX-SYBAS TO H,L
	MOV	E,H
	MVI	D,0	;DIVIDE BY 256
	POP	H	;SYTOP-SYBAS TO H,L
	CALL	DIVFE	;RESULT TO D,E
	XCHG
	CALL	PADDR	;PRINT H,L TO CBUFF
	LXI	H,CBUFF+5
	LXI	D,EMSG

ENDA0:
	LDAX	D
	ORA	A
	JZ	ENDA1
	MOV	M,A
	INX	H
	INX	D
	JMP	ENDA0

EMSG:
	DB	'H USE FACTOR',CR,0

ENDA1:
	LXI	H,CBUFF+2	;BEGINNING OF RATIO
	CALL	PCONE
	LHLD	EPC
	SHLD	FPC	;END PROGRAM COUNTER
	JMP	EOR
;
COMPDH:	;COMPARE D,E WITH H,L FOR EQUALITY (NZ FLAG IF NOT EQUAL)
	MOV	A,D
	CMP	H
	RNZ	
	MOV	A,E
	CMP	L
	RET	
;
SETAS:
	LHLD	FPC
	SHLD	ASPC
	RET	
;
SETLA:	;SYADR=SYLAB, FOLLOWED BY CHECK FOR ZERO
	LHLD	SYLAB
	SHLD	SYADR
	CALL	FOUNDE
	RET	
;
FILAB:	;FILL LABEL VALUE WITH CURRENT ASPC, IF LABEL FOUND
	CALL	SETLA
	RZ		;RETURN IF NO LABEL DETECTED
	LXI	H,0
	SHLD	SYLAB	;TO MARK NEXT STATEMENT WITH NO LABEL
	LDA	PASS
	ORA	A
	JNZ	FIL1
;
;PASS 0
	CALL	GETTYE
	PUSH	PSW	;SAVE A COPY OF TYPE
	ANI	UNDT	;CHECK FOR UNDEFINED
	CNZ	ERRL	;LABEL ERROR
	POP	PSW	;RESTORE TYPE
	ORI	PLABT	;SET TO LABEL TYPE
	CALL	SETTYE	;SET TYPE FIELD
	LHLD	ASPC	;GET CURRENT PC
	CALL	SETVALE	;PLACE INTO VALUE FIELD
	RET
;
FIL1:	;CHECK FOR DEFINED VALUE
	CALL	GETTYE
	ANI	UNDT
	CZ	ERRP	;PHASE ERROR
;	GET VALUE AND COMPARE WITH ASPC
	CALL	GETVALE	;TO H,L
	XCHG		;TO D,E
	LHLD	ASPC
	CALL	COMPDH
	CNZ	ERRP	;PHASE ERROR IF NOT THE SAME
	RET
;
FILHEX:	;WRITE HEX BYTE IN REGISTER A TO MACHINE CODE FILE IF PASS-1
	MOV	B,A
FILHB:	PUSH	B
	LDA	PASS
	ORA	A
	MOV	A,B
	CNZ	DHEXE

;	MAY BE COMPLETELY EMPTY LINE SO CHECK ADDRESS
	LDA	CBUFF+1
	CPI	' '
	LHLD	ASPC
	CZ	PADDR
	LDA	NBP
	CPI	010H
	POP	B
	MOV	A,B
	CC	WHEXB
	LHLD	FPC
	INX	H
	SHLD	FPC
	RET	

FILADR:
	PUSH	H
	MOV	B,L
	CALL	FILHB
	POP	H
	MOV	B,H
	JMP	FILHB

CHEX:
	ADI	'0'
	CPI	03AH
	RC
	ADI	'A'-'0'-10
	RET	
WHEXN:
	CALL	CHEX
	LXI	H,NBP
	MOV	E,M
	MVI	D,0
	INR	M
	LXI	H,CBUFF
	DAD	D
	MOV	M,A
	RET	
WHEXB:
	PUSH	PSW
	RAR
	RAR
	RAR
	RAR
	ANI	00FH
	CALL	WHEXN
	POP	PSW
	ANI	00FH
	JMP	WHEXN

PADD:
	LHLD	ASPC
PADDR:
	XCHG
	LXI	H,NBP
	PUSH	H
	MVI	M,1
	MOV	A,D
	PUSH	D
	CALL	WHEXB
	POP	D
	MOV	A,E
	CALL	WHEXB
	POP	H
	INR	M
	RET	
S0FA1H:
	SUI	041H
	CPI	EOF
	MOV	E,A
	RC	
	ADI	041H
	CPI	03FH
	MVI	E,EOF
	RZ	
	MVI	E,01BH
	RET	
S0FB1H:
	XRA	A
	STA	L2EA5H
	STA	NBP
	LHLD	SYBASE
	SHLD	SYADR
	LXI	H,L2EACH
	MVI	C,038H
	XRA	A
L0FC4H:
	MOV	M,A
	INX	H
	DCR	C
	JNZ	L0FC4H
L0FCAH:
	LHLD	SYADR	;H,L = SYSADR
	XCHG		;D,E = SYSADR
	LHLD	SYTOP	;H,L = SYTOP
	MOV	A,E
	SUB	L
	MOV	A,D
	SBB	H
	JNC	L10A4H
	LHLD	L3062
	CALL	COMPDH
	DCX	H
	SHLD	L3058
	JZ	L0FFDH
	CALL	GETTYE
	CPI	006H
	JNZ	L100BH
	CALL	S1C1EH
L0FF0H:
	ORA	A
	JZ	L0FFDH
	DCR	A
	PUSH	PSW
	CALL	S1C24H
	POP	PSW
	JMP	L0FF0H
L0FFDH:
	CALL	S1C2AH
	ORA	A
	JNZ	L0FFDH
	LHLD	L3058
	INX	H
	JMP	L109EH
L100BH:
	LXI	H,L2EA4H
	CMP	M
	JNZ	L1090H
	LHLD	SYADR
	SHLD	L2EAAH
	INX	H
	SHLD	L3058
	CALL	S1C24H
	LDA	PARMQ
	ORA	A
	JNZ	L103CH
	LDA	ACCLEN
	CPI	002H
	JC	L103CH
	LXI	H,ACCUM
	MOV	A,M
	CPI	03FH
	JNZ	L103CH
	INX	H
	CMP	M
	JZ	L1090H
L103CH:
	LDA	ACCUM
	CALL	S0FA1H
	LXI	H,L2EACH
	MVI	D,000H
	DAD	D
	DAD	D
L1049H:
	SHLD	L2EA8H
	MOV	E,M
	INX	H
	MOV	D,M
	XCHG
	SHLD	SYADR
	MOV	A,L
	ORA	H
	JZ	L107BH
	INX	H
	INX	H
	MOV	A,M
	ANI	00FH
	INR	A
	MOV	C,A
	LXI	D,ACCLEN
	MOV	B,M
L1063H:
	INX	D
	INX	H
	LDAX	D
	CMP	M
	JC	L107BH
	JNZ	L1075H
	DCR	B
	JZ	L107BH
	DCR	C
	JNZ	L1063H
L1075H:
	LHLD	SYADR
	JMP	L1049H
L107BH:
	LHLD	SYADR
	XCHG
	LHLD	L2EAAH
	SHLD	SYADR
	MOV	M,E
	INX	H
	MOV	M,D
	DCX	H
	XCHG
	LHLD	L2EA8H
	MOV	M,E
	INX	H
	MOV	M,D
L1090H:
	LHLD	SYADR
	INX	H
	INX	H
	MOV	A,M
	ANI	00FH
	ADI	4
	MOV	E,A
	MVI	D,0
	DAD	D
L109EH:
	SHLD	SYADR
	JMP	L0FCAH
L10A4H:
	LXI	H,L2EACH
	SHLD	L2EA8H
	MVI	A,01CH
	STA	L2EA7H
L10AFH:
	LHLD	L2EA8H
	MOV	E,M
	INX	H
	MOV	D,M
	INX	H
	SHLD	L2EA8H
	XCHG
	SHLD	SYADR
L10BDH:
	LHLD	SYADR
	MOV	A,L
	ORA	H
	JZ	L1164H
	INX	H
	INX	H
	MOV	A,M
	ANI	00FH
	INR	A
	STA	L2EA6H
	MOV	B,A
	LHLD	SYADR
	INX	H
	INX	H
	SHLD	L3058
	LDA	L2EA5H
	ORA	A
	JZ	L10FAH
	MVI	A,009H
	CALL	S1175H
	LXI	H,L2EA5H
	MOV	A,M
	ANI	0F8H
	ADI	8
	MOV	M,A
	ANI	00FH
	JZ	L10FAH
	MVI	A,008H
	ADD	M
	MOV	M,A
	MVI	A,009H
	CALL	S1175H
L10FAH:
	LDA	L2EA5H
	ADD	B
	ADI	5
	CPI	050H
	JC	L1127H
L1105H:
	LXI	H,NBP
	DCR	M
	MOV	E,M
	MVI	D,0
	DCX	D
	LXI	H,CBUFF
	DAD	D
	MOV	A,M
	CPI	TAB
	JZ	L1105H
	LXI	H,NBP
	MOV	A,M
	MVI	M,0
	STA	CBP
	CALL	S2595H
	XRA	A
	STA	L2EA5H
L1127H:
	CALL	GETVALE
	PUSH	H
	MOV	A,H
	CALL	WHEXB
	POP	H
	MOV	A,L
	CALL	WHEXB
	MVI	A,020H
	CALL	S1175H
	LXI	H,L2EA5H
	MOV	A,M
	ADI	005H
	MOV	M,A
	LDA	L2EA6H
L1143H:
	ORA	A
	JZ	L1157H
	DCR	A
	PUSH	PSW
	CALL	S1C2AH
	CALL	S1175H
	LXI	H,L2EA5H
	INR	M
	POP	PSW
	JMP	L1143H
L1157H:
	LHLD	SYADR
	MOV	E,M
	INX	H
	MOV	D,M
	XCHG
	SHLD	SYADR
	JMP	L10BDH
L1164H:
	LXI	H,L2EA7H
	DCR	M
	JNZ	L10AFH
	LDA	NBP
	STA	CBP
	CALL	S2595H
	RET
S1175H:
	LXI	H,NBP
	MOV	E,M
	MVI	D,0
	INR	M
	LXI	H,CBUFF
	DAD	D
	MOV	M,A
	RET	
ERRR:
	PUSH	PSW
	PUSH	B
	MVI	A,'R'
	CALL	PERR
	POP	B
	POP	PSW
	RET	
ERRV:
	PUSH	PSW
	PUSH	H
	MVI	A,'V'
	CALL	PERR
	POP	H
	POP	PSW
	RET
ERRD:
	PUSH	PSW
	MVI	A,'D'
	JMP	MERR
ERRP:
	PUSH	PSW
	MVI	A,'P'
	JMP	MERR
ERRL:
	PUSH	PSW
	MVI	A,'L'
	JMP	MERR
ERRO:
	PUSH	PSW
	MVI	A,'O'
	JMP	MERR
ERRB:
	PUSH	PSW
	MVI	A,'B'
	JMP	MERR
ERRS:
	PUSH	PSW
	MVI	A,'S'
	JMP	MERR
ERRN:
	PUSH	PSW
	MVI	A,'N'	;NOT IMPLEMENTED
MERR:
	CALL	PERR
	POP	PSW
	RET
L11C2H:
	DB	0
SYLAB:	DW	0	;ADDRESS OF LINE LABEL

L11C5H:
	DB	0
	DB	0
EPC:	DW	0	;END PC VALUE
NBP:	DB	0	;NEXT BYTE POSITION TO WRITE FOR MACHINE CODE
L11CAH:
	DB	0
L11CBH:
	DB	0
L11CCH:
	DB	0
IFCNT:	DB	0	;IF NESTING COUNT
IFSTK:	DB	0	;IF ELSE STACK 1=IF 2=ELSE
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
L11D6H: DW	0
L11D8H: DW	0
L11DAH:
	DB	0
L11DBH:
	DB	0
NEVAL:	DW	0	;% EVALULATION
L11DEH: DW	0
L11E0H:
	DB	0
	DB	0
L11E2H:
	DB	0
	DB	0
S11E4H:
	LHLD	L11E2H
	CALL	COMPDH
	RNZ
	MVI	M,0
	RET	
S11EEH:
	SHLD	L2EF4H
	MOV	A,M
	CPI	CR
	RNZ
	MVI	M,0
	RET	

;
; THESE DB ARE TO MAKE THE ORIGINAL MAC.COM MATCH BYTE FOR BYTE
; WHEN COMPARING THIS VERSION AND CAN BE REMOVED WHEN DONE
;
L11F8H:	DB	000H,000H,000H,000H,000H,000H,001H,017H


ENDAS6M	EQU	($ AND 0FF00H) + 100H


;***************************************************************

	TITLE	'ASM OPERAND SCAN MODULE'
;	OPERAND SCAN MODULE

	ORG	1200H

OSMAX	EQU	10
VSMAX	EQU	8*2
;
;
;	BEGINNING OF MODULE
	JMP	01600H
OPANDE:
	JMP	OPAND	;SCAN OPERAND FIELD
	JMP	MULF	;MULTIPLY FUNCTION
DIVFE:
	JMP	DIVE	;DIVIDE FUNCTION
UNARY:	DB	0	;TRUE IF OPERATOR IS UNARY
;OPERV:	DS	OSMAX	;OPERATOR STACK
;HIERV:	DS	OSMAX	;OPERATOR PRIORITY
;VSTACK:	DS	VSMAX	;VALUE STACK
;
; THESE DB ARE TO MAKE THE ORIGINAL MAC.COM MATCH BYTE FOR BYTE
; WHEN COMPARING THIS VERSION AND CAN BE REMOVED WHEN DONE
;
OPERV:	DB	000H,000H,000H,000H,000H,000H,000H,000H,000H,000H
HIERV:	DB	000H,000H,000H,000H,000H,000H,000H,000H,000H,000H
VSTACK:	DB	000H,000H,000H,000H,000H,000H,000H,000H
	DB	000H,000H,000H,000H,000H,000H,000H,000H

OSP:	DB	0	;OPERATOR STACK POINTER
VSP:	DB	0	;VALUE STACK POINTER
;
;
;
STKV:	;PLACE CURRENT H,L VALUE AT TOP OF VSTACK
	XCHG		;HOLD VALUE IN D,E
	LXI	H,VSP
	MOV	A,M
	CPI	VSMAX
	JC	STKV0
	CALL	ERREX	;OVERFLOW IN EXPRESSION
	MVI	M,0	;VSP = 0
STKV0:
	MOV	A,M	;GET VSP
	INR	M	;VSP=VSP+1
	INR	M	;VSP=VSP+2
	MOV	C,A	;SAVE VSP
	MVI	B,0	;DOUBLE VSP
	LXI	H,VSTACK
	DAD	B
	MOV	M,E	;LOW BYTE
	INX	H
	MOV	M,D	;HIGH BYTE
	RET
;
STK0:	;STACK OPERATOR (REG-A) AND PRIORITY (REG-B)
	PUSH	PSW	;SAVE IT
	LXI	H,OSP
	MOV	A,M
	CPI	OSMAX
	JC	STK01
	MVI	M,0
	CALL	ERREX	;OPERATOR STACK OVERFLOW
STK01:	MOV	E,M	;GET OSP
	MVI	D,0
	INR	M	;OSP=OSP+1
	POP	PSW	;RECALL OPERATOR
	LXI	H,OPERV
	DAD	D	;OPSERV(OSP)
	MOV	M,A	;OPSERV(OSP)=OPERATOR
	LXI	H,HIERV
	DAD	D
	MOV	M,B	;HIERV(OSP)=PRIORITY
	RET
;
LODV1:	;LOAD TOP ELEMENT FROM VSTACK TO H,L
	LXI	H,VSP
	MOV	A,M
	ORA	A
	JNZ	LODOK	
	CALL	ERREX	;UNDERFLOW
	LXI	H,0
	RET
;
LODOK:
	DCR	M
	DCR	M	;VSP=VSP-2
	MOV	C,M	;LOW BYTE
	MVI	B,0
	LXI	H,VSTACK
	DAD	B	;VSTACK(VSP)
	MOV	C,M	;GET LOW BYTE
	INX	H
	MOV	H,M
	MOV	L,C
	RET
;
LODV2:	;LOAD TOP TWO ELEMENTS DE HOLDS TOP, HL HOLDS TOP-1
	CALL	LODV1
	XCHG
	CALL	LODV1
	RET
;
APPLY:	;APPLY OPERATOR IN REG-A TO TOP OF STACK
	MOV	L,A	;OPERATOR NUMBER IN L
	MVI	H,0
	DAD	H	;OPERATOR NUMBER*2
	LXI	D,ALRTAB
	DAD	D	;INDEXED ALRTAB
	MOV	E,M	;LOW ADDRESS
	INX	H
	MOV	H,M	;HIGH ADDRESS
	MOV	L,E
	PCHL		;SET PC AND GO TO SUBROUTINE

;	ALR OPERAND TABLE
ALRTAB:	DW	MULOP	;X1
	DW	DIVOP	;X2
	DW	MODOP	;X3
	DW	SHLOP	;X4
	DW	SHROP	;X5
	DW	ADDOP	;X6
	DW	SUBOP	;X7
	DW	NEGOP	;X8
	DW	EQOP	;X9
	DW	LTOP	;X10
	DW	LEOP	;X11
	DW	GTOP	;X12
	DW	GEOP	;X13
	DW	NEOP	;X14
	DW	NOTOP	;X15
	DW	ANDOP	;X16
	DW	OROP	;X17
	DW	XOROP	;X18
	DW	HIGHOP	;X19
	DW	LOWOP	;X20
	DW	ERREX	;(
;
;	SPECIFIC HANDLERS FOLLOW
SHFT:	;SET UP OPERANDS FOR SHIFT L AND R
	CALL	LODV2
	MOV	A,D	;ENSURE 0-15
	ORA	A
	JNZ	SHERR
	MOV	A,E
	CPI	17
	RC		;RETURN IF 0-16 SHIFT
SHERR:	CALL	ERREX
	MVI	A,16
	RET
;
NEGF:	;COMPUTE 0-H,L TO H,L
	XRA	A
	SUB	L
	MOV	L,A
	MVI	A,0
	SBB	H
	MOV	H,A
	RET
;
DIVF:	CALL	LODV2
DIVE:	;(EXTERNAL ENTRY FROM MAIN PROGRAM)
	XCHG		;SWAP D,E WITH H,L FOR DIVIDE FUNCTION
;	COMPUTE X/Y WHERE X IS IN D,E AND Y IS IN H,L
;	THE VALUE OF X/Y APPEARS IN D,E AND X MOD Y IS IN H,L
;
	SHLD	DTEMP	;SAVE X IN TEMPORARY
	LXI	H,BNUM	;STORE BIT COUNT
	MVI	M,011H
	LXI	B,0	;INITIALIZE RESULT
	PUSH	B
	XRA	A	;CLEAR FLAGS
DLOOP:
	MOV	A,E	;GET LOW Y BYTE
	RAL
	MOV	E,A
	MOV	A,D
	RAL
	MOV	D,A
	DCR	M	;DECREMENT BIT COUNT
	POP	H	;RESTORE TEMP RESULT
	RZ		;ZERO BIT COUNT MEANS ALL DONE
	MVI	A,0	;ADD IN CARRY
	ACI	0	;CARRY
	DAD	H	;SHIFT TEMP RESULT LEFT ONE BIT
	MOV	B,H	;COPY H AND L TO A AND C
	ADD	L
	LHLD	DTEMP	;GET ADDRESS OF X
	SUB	L	;SUBTRACT FROM TEMPORARY RESULT
	MOV	C,A
	MOV	A,B
	SBB	H
	MOV	B,A
	PUSH	B	;SAVE TEMP RESULT IN STACK
	JNC	DSKIP	;NO BORROW FROM SUBTRACT
	DAD	B	;ADD X BACK IN
	XTHL		;REPLACE TEMP RESULT ON STACK
DSKIP:	LXI	H,BNUM	;RESTORE H,L
	CMC
	JMP	DLOOP	;REPEAT LOOP STEPS
;
DTEMP:	DW	0
BNUM:	DB	0
;
MULF:	;MULTIPLY D,E BY H,L AND REPLACE H,L WITH RESULT
	MOV	B,H
	MOV	C,L	;COPY OF 1ST VALUE TO B,C FOR SHIFT AND ADD
	LXI	H,0	;H,L IS THE ACCUMULATOR
MUL0:	XRA	A
	MOV	A,B	;CARRY IS CLEARED
	RAR
	MOV	B,A
	MOV	A,C
	RAR
	MOV	C,A
	JC	MUL1	;SKIP THIS ADD IF LSB IS ZERO
	ORA	B
	RZ		;RETURN WITH H,L
	JMP	MUL2	;SKIP ADD
MUL1:	DAD	D	;ADD CURRENT VALUE OF D
MUL2:	XCHG		;READY FOR *2
	DAD	H
	XCHG
	JMP	MUL0
;
MULOP:	;MULTIPLY D,E BY H,L
	CALL	LODV2
	CALL	MULF
	JMP	ENDOP
;
DIVOP:	;DIVIDE H,L BY D,E
	CALL	DIVF
	XCHG		;RESULT TO H,L
	JMP	ENDOP
;
MODOP:
	CALL	DIVF
	JMP	ENDOP
;
SHLOP:	CALL	SHFT	;CHECK VALUES
SHL0:	ORA	A	;DONE?
	JZ	ENDOP
	DAD	H	;HL=HL*2
	DCR	A
	JMP	SHL0
;
SHROP:	CALL	SHFT
SHR0:	ORA	A	;DONE?
	JZ	ENDOP
	PUSH	PSW	;SAVE CURRENT COUNT
	XRA	A
	MOV	A,H
	RAR
	MOV	H,A
	MOV	A,L
	RAR
	MOV	L,A
	POP	PSW
	DCR	A
	JMP	SHR0
;
ADDOP:	CALL	LODV2
ADD0:	DAD	D
	JMP	ENDOP
;
SUBOP:	CALL	LODV2
	XCHG		;TREAT AS HL+(-DE)
	CALL	NEGF	;0-HL
	JMP	ADD0
;
NEGOP:	CALL	LODV1
NEG0:	CALL	NEGF
	JMP	ENDOP
;
COMP16:	;RETURN ZERO IF H,L=D,E
	MOV	A,D
	CMP	H
	RNZ	
	MOV	A,E
	CMP	L
	RET

EQOP:
	CALL	LODV2
	CALL	COMP16	;COMPARE H,L TO D,E
	JNZ	RFALSE	;NOT EQUAL
	JMP	RTRUE

LTOP:
	CALL	LODV2

;
ISLT:	;IS LESS THAN?
	MOV	A,L
	SUB	E
	MOV	A,H
	SBB	D
	JC	RTRUE
	JMP	RFALSE
;
LEOP:
	CALL	LODV2
LEOP0:
	CALL	COMP16
	JZ	RTRUE
	JMP	ISLT
;
GTOP:
	CALL	LODV2
	XCHG
	JMP	ISLT
;
GEOP:
	CALL	LODV2
	XCHG
	JMP	LEOP0
;
NEOP:
	CALL	LODV2
	CALL	COMP16
	JNZ	RTRUE
	JMP	RFALSE
;
RTRUE:	;RETURN TRUE (FFFFH)
	LXI	H,TRUE
	JMP	ENDOP
;
RFALSE:	;NOT EQUAL
	LXI	H,FALSE
	JMP	ENDOP
;
NOTOP:	;RETURN NOT H,E IN H,E
	CALL	LODV1
	INX	H
	JMP	NEG0
;
ANDOP:	;D,E AND H,L RETURN IN H,L
	CALL	LODV2
	MOV	A,D
	ANA	H
	MOV	H,A
	MOV	A,E
	ANA	L
	MOV	L,A
	JMP	ENDOP
;
OROP:	;D,E OR H,L RETURN IN H,L
	CALL	LODV2
	MOV	A,D
	ORA	H
	MOV	H,A
	MOV	A,E
	ORA	L
	MOV	L,A
	JMP	ENDOP
;
XOROP:	;D,E XOR H,L RETURN IN H,L
	CALL	LODV2
	MOV	A,D
	XRA	H
	MOV	H,A
	MOV	A,E
	XRA	L
	MOV	L,A
	JMP	ENDOP
;
HIGHOP:	;RETURN HIGH ORDER BYTE IN L
	CALL	LODV1
	MOV	L,H	;HIGH ORDER BYTE IN L
	JMP	HLCLRH	;CLEAR H
;
LOWOP:	;RETURN LOW ORDER BYTE IN L
	CALL	LODV1	;LOW ORDER BYTE IN L
;
HLCLRH:
	MVI	H,0

ENDOP:
	JMP	STKV
;
;
;
ENDEXP:	;RETURNS ZERO FLAG IF SYMBOL IS CR, ;, OR EXCLAMATION
	LDA	TOKEN
	CPI	SPECL
	RNZ		;NOT END OF NOT SPECIAL
;
	LDA	ACCUM
	CPI	CR
	RZ
	CPI	';'
	RZ
	CPI	'!'
	RET
;
ENDEXPC:;RETURNS ZERO FLAG IF SYMBOL IS CR, ;, EXCLAMATION, OR ,
	CALL	ENDEXP
	RZ
	CPI	','
	RET
;
OPAND:	;SCAN THE OPERAND FIELD OF AN INSTRUCTION 
;       (NOT A DB WITH FIRST TOKEN STRING > 2 OR 0)
	XRA	A
	STA	OSP	;ZERO OPERATOR STACK POINTER
	STA	VSP
	DCR	A	;255
	STA	UNARY
	LXI	H,0
	SHLD	EVALUE	;CLEAR EVALUE
;
OP0:	;ARRIVE HERE WITH NEXT ITEM ALREADY SCANNED
	CALL	ENDEXPC	;DONE?
	JNZ	OP1	;NOPE.
;EMPTY THE OPERATOR STACK
EMPOP:	LXI	H,OSP
	MOV	A,M	;GET THE OSP AND CHECK FOR EMPTY
	ORA	A
	JZ	CHKVAL	;JUMP IF EMPTY
	DCR	M	;POP ELEMENT
	MOV	E,A	;COPY FOR DOUBLE ADD
	DCR	E	
	MVI	D,0
	LXI	H,OPERV
	DAD	D	;INDEXED - OPERV(OSP)
	MOV	A,M	;GET OPERATOR
	CALL	APPLY	;APPLY OPERATOR
	JMP	EMPOP
;
CHKVAL:
	LDA	VSP	;MUST HAVE ONE ELEMENT IN THE STACK
	CPI	2
	CNZ	ERREX
	LDA	CBUFF
	CPI	' '
	RNZ		;EVALUE REMAINS AT ZERO
	LHLD	VSTACK	;GET DOUBLE BYTE IN STACK
	SHLD	EVALUE
	RET
;
OP1:	;MORE TO SCAN
	LDA	CBUFF
	CPI	' '
	JNZ	GETOP
	LDA	TOKEN
	CPI	STRNG	;IS THIS A STRING?
	JNZ	OP3	;NO
;
;	STRING - CONVERT DOUBLE PRECISION
	LDA	ACCLEN	;IS THE ACCUMULATOR EMPTY?
	ORA	A
	CZ	ERREX	;ERROR IF LENGTH=0
	CPI	3
	CNC	ERREX	;ERROR IF LENGTH>2
	MVI	D,0
	LXI	H,ACCUM
	MOV	E,M	;LSBYTE
	INX	H
	DCR	A	;A HAS THE LENGTH
	JZ	OP2	;ONE OR TWO BYTES
	MOV	D,M	;FILL HIGH ORDER
;
OP2:	XCHG		;VALUE (D,E) TO H,L
	JMP	STNUM	;STORE TO STACK
;
OP3:	;NOT A STRING, CHECK FOR NUMBER
	CPI	NUMB
	JNZ	OP4
	LHLD	VALUE	;NUMERIC VALUE
	JMP	STNUM
;
OP4:	;NOT STRING OR NUMBER, MUST BE ID OR SPECL
	CALL	BGETE	;BINARY SEARCH, GET ATTRIBUTES
	JNZ	OP6	;JUMP IF MATCH NOT FOUND
;	MATCH FOUND, MAY BE OPERATOR
	CPI	OPER+1
	JNC	OP5	;NOT AN OPERATOR
;	OPERATOR ENCOUNTERED MS NIBBLE OF B IS PRIORITY NUMBER IS LS NIBBLE
;	IS THE OPERATOR
;	REG-A HAS THE OPERATOR NUMBER, B HAS PRIORITY
	CPI	NULF	;NUL?
	JNZ	OPER0	;NOT NUL
;	FOUND NUL
	CALL	S160CH
	CALL	ENDEXP
	JZ	L14E8H
	LDA	TOKEN
	CPI	STRNG
	JNZ	L14D9H
	LDA	ACCLEN
	ORA	A
	JNZ	L14D9H
	CALL	SCANE
	CALL	ENDEXPC
	JZ	L14E8H
L14D9H:
	CALL	S160CH
	CALL	ENDEXP
	JNZ	L14D9H
	LXI	H,0
	JMP	L14EBH
L14E8H:
	LXI	H,TRUE
L14EBH:
	CALL	STNUM0
	JMP	OP0
OPER0:
	CPI	LPAR	;(?
	MOV	C,A
	LDA	UNARY
	JNZ	OPER1	;JUMP IF NOT A (
;	( ENCOUNTERED, UNARY MUST BE TRUE
	ORA	A
	CZ	ERREX
	MVI	A,TRUE
	STA	UNARY	;UNARY IS SET TRUE
	MOV	A,C	;RECOVER OPERATOR
	JMP	OPER4	;CALLS STK0 AND SETS UNARY TO TRUE
;
OPER1:	;NOT A LEFT PAREN
	ORA	A
	JNZ	OPER6	;MUST BE + OR - SINCE UNARY IS SET
;
;	UNARY NOT SET, MUST BE BINARY OPERATOR
OPER2:	;COMPARE HIERARCHY OF TOS
	PUSH	B	;SAVE PRIORITY AND OPERATOR NUMBER
	LDA	OSP
	ORA	A
	JZ	OPER3	;NO MORE OPERATORS IN STACK
	MOV	E,A	;OSP TO E
	DCR	E	;OSP-1
	MVI	D,0
	LXI	H,HIERV
	DAD	D	;HL ADDRESSES TOP OF OPERATOR STACK
	MOV	A,M	;PRIORITY OF TOP OPERATOR
	CMP	B	;CURRENT GREATER?
	JC	OPER3	;JUMP IF SO
;	APPLY TOP OPERATOR TO VALUE STACK
	LXI	H,OSP
	MOV	M,E
	LXI	H,OPERV
	DAD	D
	MOV	A,M	;OPERATOR NUMBER TO ACC
	CALL	APPLY
	POP	B	;RESTORE OPERATOR NUMBER AND PRIORITY
	JMP	OPER2	;FOR ANOTHER TEST
;
OPER3:	;ARRIVE HERE WHEN OPERATOR IS STACKED
;	CHECK FOR RIGHT PAREN BALANCE
	POP	B	;OPERATOR IN C, PRIORITY IN B
	MOV	A,C
	CPI	RPAR
	JNZ	OPER4	;JUMP IF NOT A RIGHT PAREN
;
;	RIGHT PAREN FOUND, STACK MUST CONTAIN LEFT PAREN TO DELETE
	LXI	H,OSP
	MOV	A,M
	ORA	A	;ZERO
	JZ	LPERR	;PAREN ERROR IF SO
	DCR	A	;OSP-1
	MOV	M,A	;STORED TO MEMORY
	MOV	E,A
	MVI	D,0
	LXI	H,OPERV
	DAD	D
	MOV	A,M	;TOP OPERATOR IN REG-A
	CPI	LPAR
	JZ	NLERR	;JMP IF NO ERROR - PARENS BALANCE
LPERR:	CALL	ERREX
NLERR:	;ERROR REPORTING COMPLETE
	XRA	A
	JMP	OPER5	;TO CLEAR UNARY FLAG
;
OPER4:	;ORDINARY OPERATOR
	CALL	STK0
	MVI	A,TRUE
OPER5:	STA	UNARY
	JMP	GETOP	;FOR ANOTHER ELEMENT
;
OPER6:	;UNARY SET, MUST BE + OR -
	MOV	A,C	;RECALL OPERATOR
	CPI	PLUS
	JZ	GETOP	;IGNORE UNARY PLUS
	CPI	MINUS
	JNZ	CHKNOT
	INR	A	;CHANGE TO UNARY MINUS
	MOV	C,A
	JMP	OPER2
CHKNOT:	;UNARY NOT SYMBOL, HIGH, OR LOW
	CPI	NOTF
	JZ	OPER2
	CPI	HIGHF
	JZ	OPER2
	CPI	LOWF
	CNZ	ERREX
	JMP	OPER2
;
;
OP5:	;ELEMENT FOUND IN TABLE NOT AN OPERATOR
	CPI	PT	;PSEUDO OPERATOR?
	CZ	ERREX	;ERROR IF SO
	MOV	L,B	;GET LOW VALUE TO L
	MVI	H,0	;ZERO HIGH ORDER BYTE
	JMP	STNUM	;STORE IT
;
OP6:	;NOT FOUND IS TABLE SCAN, $?
	LDA	TOKEN
	CPI	SPECL
	JNZ	OP7
	LDA	ACCUM
	CPI	'$'
	JZ	CURPC	;USE CURRENT PC
	CALL	ERREX
	LXI	H,0
	JMP	STNUM
CURPC:	LHLD	ASPC	;GET CURRENT PC
	JMP	STNUM
;
OP7:	;NOT $, LOOK IT UP
	CALL	LOOKUPE
	CALL	FOUNDE
	JNZ	FIDENT
;	NOT FOUND IN SYMBOL TABLE, ENTER IF PASS 1
	MVI	A,'P'
	CALL	PERR
	CALL	ENTERE	;ENTER SYMBOL WITH ZERO TYPE FIELD
	JMP	FIDE0
FIDENT:	CALL	GETTYE	;TYPE TO H,L
	ANI	UNDT
	MVI	A,'U'
	CZ	PERR
;
FIDE0:
	CALL	GETVALE	;VALUE TO H,L
;
STNUM:
	CALL	STNUM0
;
GETOP:
	CALL	SCANE
	JMP	OP0
;
STNUM0:	;STORE H,L TO VALUE STACK
	LDA	UNARY
	ORA	A	;UNARY OPERATION SET
	CZ	ERREX	;OPERAND ENCOUNTERED WITH UNARY OFF
	XRA	A
	STA	UNARY	;SET TO OFF
	JMP	STKV	;STACK THE VALUE
;
ERREX:	;PUT 'E' ERROR IN OUTPUT BUFFER
	PUSH	H
	MVI	A,'E'
	CALL	PERR
	POP	H
	RET	

;
; THESE DB ARE TO MAKE THE ORIGINAL MAC.COM MATCH BYTE FOR BYTE
; WHEN COMPARING THIS VERSION AND CAN BE REMOVED WHEN DONE
;
L15ECH:	DB	000H,000H,000H,000H,000H,000H,000H,000H
L15F4H:	DB	000H,000H,000H,000H,000H,000H,000H,000H
L15FCH:	DB	000H,000H,000H,000H


ENDAS5M	EQU	($ AND 0FF00H) + 100H


;;
;; AS2SCAN
;;
	TITLE	'ASM SCANNER MODULE'
	ORG	1600H

	JMP	L1C00H
INITSE:
	JMP	INITS
SCANE:
	JMP	SCAN
S1609H:
	JMP	L1666H
S160CH:
	JMP	L1AFCH
LASTC:
	DB	EOF
STYPE:
	DB	0
	DB	0
	DB	0
L1613H:
	DB	0
	DB	0
	DB	0
BNL:	DS	1	;BRACKET NEST LEVEL?
L1617H:
	LXI	B,03A1AH
	ANA	E
	MVI	L,0B7H
	JZ	L164FH
	LHLD	L2EF4H
	MOV	A,M
	ORA	A
	JNZ	L1648H
	LDA	L2EA4H
	CPI	2
	JZ	L163DH
	LXI	H,L1617H+1
	INR	M
	MVI	A,000H
	RNZ
	CALL	SERRB
	CALL	S2595H
L163DH:
	CALL	S1C30H
	LDA	L2F14H
	ORA	A
	RNZ
	JMP	L1617H+2
L1648H:
	INX	H
	SHLD	L2EF4H
	JMP	020D8H
L164FH:
	CALL	S2586H
	STA	L1617H+1
	MOV	B,A
	LDA	TOKEN
	CPI	STRNG
	MOV	A,B
	RZ	
	CPI	'A' OR 1100000B	;CARRY IF LESS THAN LOWER A 165D	FE 61 	. A 
	RC	
	CPI	('Z' OR 1100000B)+1	;LOWER CASE Z 1660	FE 7B 	. { 
	RNC 	
	ANI	1011111B	;TO UPPER CASE
	RET	
L1666H:
	PUSH	PSW
	CPI	CR
	JZ	L1687H
	CPI	LF
	JZ	L1687H
	LDA	CBP
	CPI	CBMAX
	JNC	L1687H	;CONSOLE BUFFER OVERFLOW
	MOV	E,A
	MVI	D,0
	INR	A
	STA	CBP
	LXI	H,CBUFF
	DAD	D
	POP	PSW
	MOV	M,A
	RET	
L1687H:
	POP	PSW
	RET	
S1689H:
	LDA	L2F65H
	CALL	S1853H
	RNZ	
	LDA	L2F65H
	CALL	NUMT
	RET	
S1697H:
	XRA	A
	STA	L2F66H
	STA	L2F64H
	CALL	L1617H+2
	STA	L2F65H
	LDA	TOKEN
	CPI	COMM
	RZ	
	LDA	L2F65H
	CPI	128
	JC	L16C6H
	CALL	S210CH
	STA	L2F66H
	LXI	D,L2F67H
L16BBH:
	MOV	A,M
	STAX	D
	INX	H
	INX	D
	DCR	B
	JNZ	L16BBH
	JMP	L16E5H
L16C6H:
	CALL	S1853H
	RZ
L16CAH:
	CALL	S1689H
	JZ	L16F0H
	LXI	H,L2F66H
	MOV	A,M
	CPI	00FH
	JNC	L16EEH
	INR	M
	LXI	H,L2F67H
	MOV	E,A
	MVI	D,0
	DAD	D
	LDA	L2F65H
	MOV	M,A
L16E5H:
	CALL	L1617H+2
	STA	L2F65H
	JMP	L16CAH
L16EEH:
	XRA	A
	RET	
L16F0H:
	XRA	A
	INR	A
	RET	
S16F3H:
	LHLD	SYADR
	SHLD	L1613H
	CALL	S1C33H
	CALL	S1C36H
	RNZ
	LHLD	L1613H
	SHLD	SYADR
	RET	
S1707H:
	XRA	A
	STA	L1617H
L170BH:
	LXI	H,L1617H
	INR	M
	JNZ	L171DH
	CALL	SERRO
	LXI	H,L2F66H
	MVI	M,0
	SHLD	L2EF4H
L171DH:
	LXI	H,L2F66H
	MOV	A,M
	ORA	A
	JZ	L1735H
	DCR	M
	LXI	H,L2F64H
	MOV	E,M
	INR	M
	MVI	D,0
	LXI	H,L2F67H
	DAD	D
	MOV	A,M
	JMP	L1666H
L1735H:
	LDA	L2EA3H
	ORA	A
	LDA	L2F65H
	JNZ	L174AH
	MOV	B,A
	ORA	A
	JNZ	L1777H
	CALL	L1617H+2
	JMP	L1666H
L174AH:
	ORA	A
	JZ	L177FH
	CPI	'^'
	JNZ	L176CH
	CALL	S1697H
	MVI	B,05EH
	JNZ	L177BH
	LDA	L2F65H
	CPI	'&'
	JNZ	L177BH
	LXI	H,L2F66H
	INR	M
	INX	H
	MOV	M,A
	JMP	L1777H
L176CH:
	CPI	026H
	JZ	L179EH
	MOV	B,A
	CPI	07FH
	JZ	L17B1H
L1777H:
	XRA	A
	STA	L2F65H
L177BH:
	MOV	A,B
	JMP	L1666H
L177FH:
	CALL	S1697H
	JZ	L170BH
	LDA	L2F65H
	CPI	026H
	JZ	L1795H
	LDA	TOKEN
	CPI	STRNG
	JZ	L170BH
L1795H:
	CALL	S16F3H
	JZ	L170BH
	JMP	L17BDH
L179EH:
	CALL	S1697H
	MVI	B,026H
	JZ	L177BH
	CALL	S16F3H
	MVI	B,026H
	JZ	L177BH
	JMP	L17BDH
L17B1H:
	CALL	S1697H
	JZ	L170BH
	CALL	S16F3H
	JZ	L170BH
L17BDH:
	LXI	H,L2F65H
	MOV	A,M
	CPI	026H
	JNZ	L17C8H
	MVI	A,07FH
L17C8H:
	MVI	M,000H
	STA	L2F14H
	CALL	S1C2DH
	LXI	H,L2EA4H
	MVI	M,2
	LHLD	SYMAX
	SHLD	L2F24H
	CALL	S1C42H
	SHLD	L2EF4H
	XRA	A
	STA	L2F66H
	LHLD	L1613H
	SHLD	SYADR
	CALL	S1697H
	JMP	L170BH
INITS:
	CALL	ZERO
	STA	L2F66H
	STA	L2F65H
	STA	NEXTC
	STA	CBP
	MVI	A,LF
	STA	LASTC
	CALL	S2595H
	MVI	A,16	;START OF SOURCE LINE
	STA	CBP
	RET	
ZERO:
	XRA	A
	STA	ACCLEN
	STA	STYPE
	RET	
;
SAVER:	;STORE THE NEXT CHARACTER IN THE ACCUMULATOR AND UDPATE
	LXI	H,ACCLEN
	MOV	A,M
	CPI	ACMAX
	JC	SAV1	;JUMP IF NOT LAST POSITION
	MVI	M,0
	CALL	SERRO
SAV1:
	MOV	E,M	;D,E WILL HOLD INDEX
	MVI	D,0	;
	INR	M	;ACCLEN IS INCREMENTED
	INX	H	;ADDRESS ACCUMULATOR
	DAD	D	;ADD INDEX TO ACCUMULATOR
	LDA	NEXTC	;GET CHARACTER
	MOV	M,A	;INTO ACCUMULATOR
	RET
;
TDOLL:	;TEST FOR DOLLAR SIGN, ASSUMING H,L ADDRESS NEXTC
	MOV	A,M
	CPI	'$'
	RNZ
	XRA	A
	MOV	M,A
	RET	
;
NUMERIC:;CHECK NEXTC FOR NUMERIC, RETURN ZERO FLAG IF NOT NUMERIC
	LDA	NEXTC
NUMT:
	SUI	'0'
;	CARRY RESET IF NUMERIC
	CPI	10
	RAL	
	ANI	1B	;ZERO IF NOT NUMERIC
	RET	
HEX:
	CALL	NUMERIC
	RNZ
	LDA	NEXTC
	SUI	'A'
	CPI	6
	RAL
	ANI	1
	RET	
LETTER:	;RETURN ZERO FLAG IF NEXTC IS NOT A LETTER
	LDA	NEXTC
S1853H:
	CPI	'?'
	JZ	L1865H
	CPI	'@'
	JZ	L1865H
	SUI	'A'
	CPI	EOF
	RAL	
	ANI	001H
	RET	
L1865H:
	ORA	A
	RET	
ALNUM:	;RETURN ZERO FLAG IF NOT ALPHANUMERIC
	CALL	LETTER
	RNZ
	CALL	NUMERIC
	RET	
S186FH:
	CPI	' '
	RNC 	
	CPI	TAB
	RZ	
	CPI	CR
	RZ	
	CPI	LF
	RZ	
	CPI	EOF
	RZ	
	JMP	SERRI
;
GNCN:	;GET CHARACTER AND STORE TO NEXTC
	CALL	S1707H
	CALL	S186FH
	STA	NEXTC
	LDA	L305A
	ORA	A
	JZ	L18A6H
	LDA	0305CH
	CPI	1
	JNZ	L18A0H
	LDA	PASS
	ORA	A
	JNZ	L18A6H
L18A0H:
	LDA	NEXTC
	CALL	S1C27H
L18A6H:
	LDA	NEXTC
	RET	
EOLT:
	CPI	CR
	RZ	
	CPI	EOF
	RZ	
	CPI	'!'
	RET	
SCAN:
	CALL	ZERO
;
;	DEBLANK
DEBL:
	XRA	A
	STA	TOKEN
	LDA	NEXTC
	CPI	TAB	;TAB?
	JZ	DEB0
	CPI	';'
	JNZ	L192FH
	MVI	A,COMM
	STA	TOKEN	;SET TOKEN = COMMENT
	LDA	L305A	;MACRO?
	ORA	A
	JZ	DEB1
	LDA	0305CH
	CPI	1
	JNZ	L18E2H
	LDA	PASS
	ORA	A
	JNZ	DEB1	;JUMP IF PASS 1
L18E2H:
	CALL	GNCN
	CPI	';'
	JNZ	L1942H	;NOT A SEMI-COLON
	LHLD	L3060
	XCHG	
	LHLD	L3058
	DCX	H
	DCX	H
L18F3H:
	MOV	A,E
	CMP	L
	JNZ	L18FDH
	MOV	A,D
	CMP	H
	JZ	L1911H
L18FDH:
	MOV	A,M
	CPI	00AH
	JNZ	L1908H
	DCX	H
	DCX	H
	JMP	L1911H
L1908H:
	CPI	'!'
	JNC	L1911H
	DCX	H
	JMP	L18F3H
L1911H:
	SHLD	L3058
	LDA	L305A
	PUSH	PSW
	XRA	A
	STA	L305A
L191CH:
	CALL	GNCN
	CALL	EOLT	;CR, EOF, OR EXCLAMATION?
	JNZ	L191CH	;JUMP IF NO
	CALL	S1C27H
	POP	PSW
	STA	L305A
	JMP	FINDL
L192FH:
	LDA	NEXTC	;IF NEXT CHARACTER IS *
	CPI	'*'
	JNZ	DEB2	;JUMP
	LDA	LASTC	;IF LAST CHARACTER WAS NOT EOF
	CPI	LF
	JNZ	DEB2	;JUMP
;	COMMENT FOUND, REMOVE IT
DEB1:	CALL	GNCN
L1942H:
	CALL	EOLT	;CR, EOF, OR EXCLAMATION?
	JZ	FINDL	;JUMP IF YES
	JMP	DEB1
DEB2:
	ORI	' '
	CPI	' '
	JNZ	FINDL
DEB0:
	CALL	GNCN
	JMP	DEBL
;
;	LINE DEBLANKED, FIND TOKEN TYPE
FINDL:	;LOOK FOR LETTER, DECIMAL DIGIT, OR STRING QUOTE
	XRA	A
	STA	TOKEN	;ZERO TOKEN
	CALL	LETTER
	JZ	FIND0
	MVI	A,IDEN
	JMP	STOKEN	;STORE TOKEN
FIND0:
	CALL	NUMERIC
	JZ	FIND1
	MVI	A,NUMB
	JMP	STOKEN
FIND1:
	LDA	NEXTC
	CPI	''''
	JNZ	FIND2
	XRA	A
	STA	NEXTC	;DON'T STORE THE QUOTE
	MVI	A,STRNG
	JMP	STOKEN
FIND2:	;ASSUME IT'S A SPECIAL CHARACTER
	CPI	LF	;IF LF THEN DUMP THE BUFFER
	JNZ	FIND3
;	LF FOUND
	LDA	L2EA3H
	ORA	A
	JZ	L1994H
	MVI	A,'+'
	STA	CBUFF+5
L1994H:
	CALL	S2595H
	LXI	H,CBUFF	;CLEAR ERROR CHAR ON BOTH PASSES
	MVI	M,' '
	MVI	A,16
	STA	CBP	;START NEW LINE
FIND3:
	MVI	A,SPECL
;
STOKEN:
	STA	TOKEN
;
;
;	LOOP WHILE CURRENT ITEM IS ACCUMULATING
SCTOK:
	LDA	NEXTC
	STA	LASTC	;SAVE LAST CHARACTER
	ORA	A
	CNZ	SAVER	;STORE CHARACTER INTO ACCUM IF NOT ZERO
	CALL	GNCN	;GET NEXT TO NEXTC
	LDA	TOKEN
	CPI	SPECL
	JNZ	L1A06H
	LDA	L305A
	ORA	A
	RNZ
;	CONVERT CONVENIENCE <,<=,=,<>,>=,> TO EQUIVALENTS
	LDA	ACCUM
	CPI	'='
	JNZ	LTLET	;NOT =
	LXI	H,'EQ'	;= TO EQ
	JMP	SAVERO
;
LTLET:	;TEST FOR < OR <=
	CPI	'<'
	JNZ	GTGET
	LXI	H,'LT'
	LDA	NEXTC
	CPI	'='
	JNZ	SAVERO
	LXI	H,'LE'
	JMP	SKIPN
;
GTGET:	;TEST FOR > OR >=
	CPI	'>'
	RNZ
	LXI	H,'GT'
	LDA	NEXTC
	CPI	'='
	JNZ	SAVERO
	LXI	H,'GE'
;
SKIPN:	;SKIP NEXTC
	XRA	A
	STA	NEXTC

;
SAVERO:	;SAVE H,L RELATIONAL OPERAND IN ACCUM
	SHLD	ACCUM
	LXI	H,ACCLEN
	INR	M	;ACCLEN=ACCLEN+1
	MVI	A,IDEN	;SET TOKEN TO IDEN
	STA	TOKEN
	RET
;
L1A06H:
	LXI	H,NEXTC
	LDA	TOKEN
	CPI	IDEN
	JNZ	SCT2
;
;	ACCUMULATING AN IDENTIFIER
	CALL	TDOLL
	JZ	SCTOK
	CALL	ALNUM
	JNZ	SCTOK
	RET
;
SCT2:
	CPI	NUMB
	JNZ	SECT3
	CALL	TDOLL
	JZ	SCTOK
	CALL	HEX
	JNZ	SCTOK
	LDA	NEXTC
	CPI	'O'
	JZ	NOCT
	CPI	'Q'
	JNZ	NUM2
;
NOCT:
	MVI	A,OCTV
	JMP	SSTYP
NUM2:
	CPI	'H'
	JNZ	NUM3
	MVI	A,HEXV
SSTYP:
	STA	STYPE
	XRA	A
	STA	NEXTC
	JMP	NCON
NUM3:
	LDA	LASTC
	CPI	'B'
	JNZ	NUM4
	MVI	A,BINV
	JMP	SSTY1
NUM4:
	CPI	'D'
	MVI	A,DECV
	JNZ	SSTY2
SSTY1:
	LXI	H,ACCLEN
	DCR	M
SSTY2:
	STA	STYPE
NCON:
	LXI	H,0
	SHLD	VALUE
	LXI	H,ACCLEN
	MOV	C,M
	INX	H
CLOP:
	MOV	A,M
	INX	H
	CPI	'A'
	JNC	CLOP1
	SUI	'0'
	JMP	CLOP2
CLOP1:
	SUI	'A'-10
CLOP2:
	PUSH	H
	PUSH	B
	MOV	C,A
	LXI	H,STYPE
	CMP	M
	CNC	SERRV
	MVI	B,0
	MOV	A,M
	LHLD	VALUE
	XCHG
	LXI	H,0
CLOP3:
	ORA	A
	JZ	CLOP4
	RAR
	JNC	TTWO
	DAD	D
TTWO:
	XCHG
	DAD	H
	XCHG
	JMP	CLOP3
CLOP4:
	DAD	B
	SHLD	VALUE
	POP	B
	POP	H
	DCR	C
	JNZ	CLOP
	RET	
SECT3:
	LDA	NEXTC
	CPI	CR
	JZ	SERRO
	CPI	''''
	JNZ	SCTOK
	CALL	GNCN
	CPI	''''
	RNZ
	JMP	SCTOK
;
WHTSPT:	;RETURN ZERO IF NULL, SPACE OR TAB WHITE SPACE
	LDA	NEXTC
	ORA	A
	RZ	
	CPI	' '
	RZ
	CPI	TAB
	RET
;
CSCSPT:	;RETURN ZERO IF COMMA, SEMI-COLON, OR PERCENT
	LDA	NEXTC
	CPI	','
	RZ	
	CPI	';'
	RZ	
	CPI	'%'
	RZ
;
EOLTC:	;END OF LINE TEST FOR COMMENT SCAN
	LDA	NEXTC
	CPI	CR
	RZ
	CPI	EOF
	RZ
	CPI	'!'
	RET	
;
SCSTCT:	;RETURN ZERO IF SEMI-COLON, SPACE, TAB OR COMMA
	LDA	NEXTC
	CPI	';'
	RZ
	CPI	' '
	RZ
	CPI	TAB
	RZ
	CPI	','
	RET
;
L1AFCH:
	CALL	ZERO
	XRA	A
	STA	TOKEN
	STA	BNL
;
SWHTSP:	;SKIP WHITESPACE
	CALL	WHTSPT
	JNZ	L1B12H
	CALL	GNCN
	JMP	SWHTSP
L1B12H:
	CALL	CSCSPT
	JNZ	L1B2FH
	MVI	A,SPECL
	STA	TOKEN
	JMP	L1BC9H
L1B20H:
	LDA	NEXTC
	STA	LASTC
	CALL	GNCN
	LDA	TOKEN
	CPI	SPECL
	RZ
;
L1B2FH:
	CALL	EOLTC
	JNZ	L1B47H
;	END OF LINE TESTS
	LDA	TOKEN
	CPI	STRNG
	CZ	SERRV	;SINGLE QUOTE ENCOUNTERED - 'V' ERROR
	LDA	BNL	;WITHIN A NESTED BRACKET?
	ORA	A	;
	CNZ	SERRV	;YES, 'V' ERROR
	JMP	L1BCFH
;
L1B47H:
	LDA	TOKEN
	CPI	STRNG
	JNZ	L1B6CH	;CURRENT TOKEN IS NOT A STRING
	LDA	NEXTC
	CPI	''''
	JNZ	L1BC9H
	CALL	SAVER
	CALL	GNCN
	LDA	NEXTC
	CPI	''''
	JZ	L1B20H
	XRA	A
	STA	TOKEN
	JMP	L1B2FH
;
L1B6CH:
	LDA	NEXTC
	CPI	''''
	JNZ	L1B7CH
	MVI	A,STRNG
	STA	TOKEN
	JMP	L1BC9H
L1B7CH:
	CPI	'^'
	JNZ	L1B97H
	CALL	GNCN
	LDA	NEXTC
	CPI	TAB
	JZ	L1BC9H
	CPI	' '
	JNC	L1BC9H
	CALL	SERRI
	JMP	L1BCFH
L1B97H:
	CPI	'<'	;LEFT BROKEN BRACKET?
	JNZ	L1BA8H	;NO
	LXI	H,BNL	;INCREMENT BRACKET LEVEL
	MOV	A,M
	INR	M
	ORA	A	;FIRST BRACKET?
	JZ	L1B20H	;YES, DO NOT STORE CHARACTER
	JMP	L1BC9H	;NO, STORE CHARACTER
L1BA8H:
	CPI	'>'
	JNZ	L1BBCH
	LXI	H,BNL
	MOV	A,M
	ORA	A
	JZ	L1BC9H
	DCR	M
	JZ	L1B20H
	JMP	L1BC9H
L1BBCH:
	LDA	BNL
	ORA	A
	JNZ	L1BC9H
	CALL	SCSTCT
	JZ	L1BCFH
L1BC9H:
	CALL	SAVER
	JMP	L1B20H
L1BCFH:
	MVI	A,TOKEN5
	STA	TOKEN
	RET	
;
;	END OF SCANNER
;
;	ERROR MESSAGE ROUTINES
SERRV:	;'V' SCAN VALUE ERROR
	PUSH	PSW
	MVI	A,'V'
	JMP	SERR
;
SERRO:	;'O' SCAN OVERFLOW ERROR
	PUSH	PSW
	MVI	A,'O'
	JMP	SERR
;
SERRI:	;'I' SCAN INVALID CHARACTER
	PUSH	PSW
	MVI	A,'I'
	JMP	SERR
;
SERRB:	;'B' SCAN BALANCE ERROR
	PUSH	PSW
	MVI	A,'B'
	JMP	SERR
;
SERR:	;SCAN PRINT ERROR MESSAGE
	PUSH	B
	PUSH	H
	CALL	PERR
	POP	H
	POP	B
	POP	PSW
	RET		;1BF5	C9 	. 

ENDAS2M	EQU	($ AND 0FF00H) + 100H

;
; THESE DB ARE TO MAKE THE ORIGINAL MAC.COM MATCH BYTE FOR BYTE
; WHEN COMPARING THIS VERSION AND CAN BE REMOVED WHEN DONE
;
L1BF6H:	DB	0F1H,0C9H,000H,000H,000H,000H,000H,000H
L1BFEH:	DB	000H,000H

;;
;; AS3SYM
;;
	TITLE	'ASM SYMBOL TABLE MODULE'
;	SYMBOL TABLE MANIPULATION MODULE
;
	ORG 01C00H

L1C00H:
	JMP	02100H
INISYE:
	JMP	INISY
LOOKUPE:
	JMP	LOOKUP
FOUNDE:
	JMP	FOUND
ENTERE:
	JMP	ENTER
SETTYE:
	JMP	SETTY
GETTYE:
	JMP	GETTY
SETVALE:
	JMP	SETVAL
GETVALE:
	JMP	GETVAL
S1C1BH:
	JMP	L2059H
S1C1EH:
	JMP	L2060H
S1C21H:
	JMP	L2065H
S1C24H:
	JMP	L2092H
S1C27H:
	JMP	L20BCH
S1C2AH:
	JMP	L20B2H
S1C2DH:
	JMP	L1D7EH
S1C30H:
	JMP	L1DC5H
S1C33H:
	JMP	L1E8FH
S1C36H:
	JMP	L1E47H
S1C39H:
	JMP	L1F87H
S1C3CH:
	JMP	L1FA5H
S1C3FH:
	JMP	L1FBBH
S1C42H:
	JMP	L1FF0H
S1C45H:
	JMP	LCOMP
S1C48H:
	JMP	CHASH
S1C4BH:
	JMP	L1D66H
;
;
;       DATA AREAS
;       SYMBOL TABLE BEGINS AT THE END OF THIS MODULE
FIXD    EQU     5       ;5 BYTES OVERHEAD WITH EACH SYMBOL ENTRY
;                       2BY COLLISION, 1BY TYPE/LEN, 2BY VALUE
HTSIZE  EQU     128     ;HASH TABLE SIZE
HMASK   EQU     HTSIZE-1;HASH MASK FOR CODING
;HASHT:  DS	HTSIZE*2;HASH TABLE
;HASHC:  DS	1       ;HASH CODE AFTER CALL ON LOOKUP
;HASHP:	DS	2	;POINTER TO HASH ENTRY
;
; THESE DB ARE TO MAKE THE ORIGINAL MAC.COM MATCH BYTE FOR BYTE
; WHEN COMPARING THIS VERSION AND CAN BE REMOVED WHEN DONE
;
HASHT:	DB	044H,03FH,0B2H,03CH,01EH,03DH,0C7H,03DH
L1C56H:	DB	0A1H,03AH,000H,000H,065H,03EH,000H,000H
L1C5EH:	DB	03FH,03BH,020H,03EH,000H,000H,03CH,03EH
L1C66H:	DB	089H,03BH,020H,03CH,059H,03DH,032H,03DH
L1C6EH:	DB	003H,03EH,0E8H,03BH,0FAH,03CH,000H,000H
L1C76H:	DB	000H,000H,0B7H,03DH,000H,000H,052H,03EH
L1C7EH:	DB	0DCH,03EH,0E5H,03EH,000H,000H,000H,000H
L1C86H:	DB	046H,03EH,0DCH,03BH,000H,000H,09CH,03EH
L1C8EH:	DB	047H,03DH,000H,000H,000H,000H,000H,000H
L1C96H:	DB	000H,000H,093H,03DH,0C6H,03CH,015H,03DH
L1C9EH:	DB	000H,000H,0AEH,03DH,091H,03EH,0BEH,03DH
L1CA6H:	DB	000H,000H,000H,000H,000H,000H,000H,000H
L1CAEH:	DB	073H,03BH,0A5H,03DH,050H,03DH,000H,000H
L1CB6H:	DB	000H,000H,000H,000H,02AH,03EH,004H,03DH
L1CBEH:	DB	024H,03FH,050H,03AH,02DH,03FH,05DH,03EH
L1CC6H:	DB	02AH,03CH,015H,03CH,000H,000H,081H,03DH
L1CCEH:	DB	08AH,03DH,000H,000H,0E5H,03CH,0FFH,03BH
L1CD6H:	DB	000H,000H,09CH,03DH,081H,03EH,089H,03EH
L1CDEH:	DB	079H,03EH,00AH,03CH,055H,03CH,0FEH,03AH
L1CE6H:	DB	03FH,03CH,06BH,03CH,0DDH,03AH,0F4H,03BH
L1CEEH:	DB	000H,000H,000H,000H,000H,000H,0C6H,03EH
L1CF6H:	DB	000H,000H,000H,000H,000H,000H,009H,03BH
L1CFEH:	DB	0E8H,03AH,00DH,03DH,093H,03BH,0FBH,03EH
L1D06H:	DB	005H,03FH,000H,000H,000H,000H,0EEH,03EH
L1D0EH:	DB	050H,03FH,000H,000H,0AAH,03CH,0F9H,03DH
L1D16H:	DB	01AH,03FH,0B2H,03EH,0BCH,03EH,0EFH,03DH
L1D1EH:	DB	000H,000H,0DBH,03CH,0D1H,03CH,000H,000H
L1D26H:	DB	069H,03BH,000H,000H,000H,000H,000H,000H
L1D2EH:	DB	000H,000H,000H,000H,000H,000H,06DH,03DH
L1D36H:	DB	016H,03EH,000H,000H,000H,000H,063H,03DH
L1D3EH:	DB	0E5H,03DH,0A8H,03EH,06FH,03EH,076H,03CH
L1D46H:	DB	0DBH,03DH,0BCH,03CH,0A8H,03BH,038H,03FH
HASHC:	DB	001H
HASHP:	DB	04EH,01CH
;
;       SYMBOL TABLE ENTRY FORMAT IS
;               -----------------  OFFSET
;               : MSB VAL BYTE  :  5 + LENG
;               -----------------
;      VALADR=  : LSB VAL BYTE  :  4 + LENG
;               -----------------
;               : CHARACTER N   :  3 + LENG
;               -----------------
;               :    ...        :
;               -----------------
;               : CHARACTER 1   :  3
;               -----------------
;               : TYPE  : LENG  :  2
;               -----------------
;               : MSB COLLISION :  1
;               -----------------
;       SYADR=  : LSB COLLISION :  0
;               -----------------
;
;       VALADR=SYSADR+3+N
;
;       WHERE THE LOW/HIGH COLLISION FIELD ADDRESSES ANOTHER ENTRY WITH
;       THE SAME HASH CODE (OR ZERO IF THE END OF CHAIN), TYPE DESCRIBES
;       THE ENTRY TYPE (GIVEN BELOW), LENG IS THE NUMBER OF CHARACTERS IN
;       THE SYMBOL PRINTNAME -1 (I.E., LENG=0 IS A SINGLE CHARACTER PRINT-
;       NAME, WHILE LENG=15 INDICATES A 16 CHARACTER NAME).  CHARACTER 1
;       THROUGH N GIVE THE PRINTNAME CHARACTERS IN ASCII UPPER CASE (ALL
;       LOWER CASE NAMES ARE TRANSLATED ON INPUT), AND THE LOW/HIGH VALUE
;       GIVE THE PARTICULAR ADDRESS OR CONSTANT VALUE ASSOCIATED WITH THE
;       NAME.  THE REPRESENTATION OF MACROS DIFFERS IN THE FIELDS WHICH
;       FOLLOW THE VALUE FIELD (MACROS ARE NOT CURRENTLY IMPLEMENTED).
;
;       THE TYPE FIELD CONSISTS OF FOUR BITS WHICH ARE ASSIGNED AS
;       FOLLOWS:
;
;               0000    UNDEFINED SYMBOL
;               0001    LOCAL   LABELLED PROGRAM
;               0010    LOCAL   LABELLED DATA
;               0011    (UNUSED)
;               0100    EQUATE
;               0101    SET
;               0110    MACRO
;               0111    (UNUSED)
;
;               1000    (UNUSED)
;               1001    EXTERN  LABELLED PROGRAM
;               1010    EXTERN  LABELLED DATA
;               1011    REFERENCE TO MODULE
;               1100    (UNUSED)
;               1101    GLOBAL  UNDEFINED SYMBOL
;               1110    GLOBAL  LABELLED PROGRAM
;               1111    (UNUSED)
;
;       TYPE DEFINITIONS
;
UNDFT	EQU	0000B	;UNDEFINED
PLABT   EQU     0001B   ;PROGRAM LABEL
DLABT   EQU     0010B   ;DATA LABEL
EQUT    EQU     0100B   ;EQUATE
SETT    EQU     0101B   ;SET
MACT    EQU     0110B   ;MACRO
;
EXTT    EQU     1000B   ;EXTERNAL ATTRIBUTE
REFT    EQU     1011B   ;REFER
GLBT    EQU     1100B   ;GLOBAL ATTRIBUTE
;
;
INISY:	;INITIALIZE SYMBOL TABLE
	LXI	H,HASHT	;ZERO HASH TABLE
	MVI	B,HTSIZE
	XRA	A	;CLEAR ACCUM
INI0:
	MOV	M,A
	INX	H
	MOV	M,A	;CLEAR DOUBLE WORD
	INX	H
	DCR	B
	JNZ	INI0
;
;	SET SYMBOL TABLE POINTERS
	LXI	H,0
	SHLD	SYADR
;
	RET	

L1D66H:	;CLEAR RECORD BUFFER
	LXI	H,RBUFF
	MVI	B,RSIZE/2
	XRA	A
L1D6CH:
	MOV	M,A
	INX	H
	MOV	M,A	;CLEAR DOUBLE WORD
	INX	H
	DCR	B
	JNZ	L1D6CH
	RET	

	CALL	CHASH
	ANI	00FH
	STA	HASHC
	RET	

L1D7EH:
	LXI	H,L2EA3H
	MOV	A,M
	CPI	00FH
	JNC	L1E15H
	INR	M
	MOV	E,M	;INCREMENT MACRO NEST COUNT
	MVI	D,0
	LXI	H,L2EA4H
	MOV	A,M
	DAD	D
	MOV	M,A
	LXI	H,L2ED4H
	CALL	S1DBCH
	LXI	H,L2EB4H
	CALL	S1DBCH
	LXI	H,L2EF4H
	CALL	S1DBCH
	LXI	H,L2F14H
	MOV	A,M
	DAD	D
	MOV	M,A
	LXI	H,L2F24H
	CALL	S1DBCH
	LXI	H,L2F44H
	MOV	A,M
	DAD	D
	MOV	M,A
	LXI	H,L2F54H
	MOV	A,M
	DAD	D
	MOV	M,A
	RET	
S1DBCH:
	MOV	C,M
	INX	H
	MOV	B,M
	DAD	D
	DAD	D
	MOV	M,B
	DCX	H
	MOV	M,C
	RET	
L1DC5H:
	LXI	H,L2EA3H
	MOV	A,M
	ORA	A
	JZ	L1E15H
	PUSH	H
	MOV	E,M
	MVI	D,0
	LXI	H,L2EA4H
	CALL	S1E04H
	LXI	H,L2ED4H
	CALL	S1E0AH
	LXI	H,L2EB4H
	CALL	S1E0AH
	LXI	H,L2EF4H
	CALL	S1E0AH
	LXI	H,L2F14H
	CALL	S1E04H
	LXI	H,L2F24H
	CALL	S1E0AH
	LXI	H,L2F44H
	CALL	S1E04H
	LXI	H,L2F54H
	CALL	S1E04H
	POP	H
	DCR	M
	RET	
S1E04H:
	PUSH	H
	DAD	D
	MOV	A,M
	POP	H
	MOV	M,A
	RET		;1E09	C9 	. 
S1E0AH:
	PUSH	H	;1E0A	E5 	. 
	DAD	D	;1E0B	19 	. 
	DAD	D	;1E0C	19 	. 
	MOV	C,M	;1E0D	4E 	N 
	INX	H	;1E0E	23 	# 
	MOV	B,M	;1E0F	46 	F 
	POP	H	;1E10	E1 	. 
	MOV	M,C	;1E11	71 	Q 
	INX	H	;1E12	23 	# 
	MOV	M,B	;1E13	70 	P 
	RET		;1E14	C9 	. 
L1E15H:
	MVI	A,'B'	;1E15	3E 42 	> B 
	JMP	PERR	;1E17	C3 98 25 	. . % 
;
CHASH:	;COMPUTE HASH CODE FOR CURRENT ACCUMULATOR
	LXI	H,ACCLEN	;1E1A	21 08 30 	. . 0 
	SHLD	ACCLENP	;STORE POINTER TO ACCLEN
CHHL:	
	LHLD	ACCLENP	;H,L = ACCLEN
	MOV	B,M	;GET ACCUM LENGTH
	XRA	A	;CLEAR ACCUMULATOR
CH0:	INX	H	;MOVE TO FIRST/NEXT CHARACTER POSITION
	ADD	M	;ADD WITH OVERFLOW
	DCR	B
	JNZ	CH0
	ANI	HMASK	;MASK BITS FOR MODULO HSIZE
	STA	HASHC	;FILL HASHC WITH RESULT
	RET		;1E30	C9 	. 
;
SETLN:	;SET THE LENGTH FIELD OF THE CURRENT SYMBOL
	MOV	B,A	;1E31	47 	G 
	LHLD	SYADR	;1E32	2A 56 30 	* V 0 
	INX	H	;1E35	23 	# 
	INX	H	;1E36	23 	# 
	MOV	A,M	;1E37	7E 	~ 
	ANI	0F0H	;1E38	E6 F0 	. . 
	ORA	B	;1E3A	B0 	. 
	MOV	M,A	;1E3B	77 	W 
	RET		;1E3C	C9 	. 
;
GETLN:	;GET THE LENGTH FIELD TO REG-A
	LHLD	SYADR	;1E3D	2A 56 30 	* V 0 
	INX	H	;1E40	23 	# 
	INX	H	;1E41	23 	# 
	MOV	A,M	;1E42	7E 	~ 
	ANI	00FH	;1E43	E6 0F 	. . 
	INR	A	;LENGTH IS STORED AS VALUE-1
	RET		;1E46	C9 	. 
;
L1E47H:
	CALL	FOUND	;1E47	CD 89 1E 	. . . 
	RZ	;1E4A	C8 	. 
	XCHG	;1E4B	EB 	. 
	LXI	B,0	;1E4C	01 00 00 	. . . 
	LDA	L2EA4H	;1E4F	3A A4 2E 	: . . 
	CPI	1	;1E52	FE 01 	. . 
	JZ	L1E74H	;1E54	CA 74 1E 	. T . 
	LXI	H,L2EA3H	;1E57	21 A3 2E 	. . . 
	MOV	C,M	;1E5A	4E 	N 
	MVI	B,0	;1E5B	06 00 	. . 
	LXI	H,L2EA4H	;1E5D	21 A4 2E 	. . . 
	DAD	B	;1E60	09 	. 
;
L1E61H:
	MOV	A,C	;1E61	79 	Y 
	ORA	A	;1E62	B7 	. 
	JZ	L1E71H	;1E63	CA 71 1E 	. Q . 
	MOV	A,M	;1E66	7E 	~ 
	CPI	001H	;1E67	FE 01 	. . 
	JZ	L1E74H	;1E69	CA 74 1E 	. T . 
	DCX	B	;1E6C	0B 	. 
	DCX	H	;1E6D	2B 	+ 
	JMP	L1E61H	;1E6E	C3 61 1E 	. A . 

L1E71H:
	INR	A	;1E71	3C 	< 
	XCHG		;1E72	EB 	. 
	RET		;1E73	C9 	. 

L1E74H:
	LXI	H,L2F24H	;1E74	21 24 2F 	. $ / 
	DAD	B	;1E77	09 	. 
	DAD	B	;1E78	09 	. 
	MOV	A,E	;1E79	7B 	{ 
	SUB	M	;1E7A	96 	. 
	MOV	A,D	;1E7B	7A 	Z 
	INX	H	;1E7C	23 	# 
	SBB	M	;1E7D	9E 	. 
	JC	FOUND	;1E7E	DA 89 1E 	. . . 
	LXI	H,0	;1E81	21 00 00 	. . . 
	SHLD	SYADR	;1E84	22 56 30 	" V 0 
	XRA	A	;1E87	AF 	. 
	RET		;1E88	C9 	. 

FOUND:
	LHLD	SYADR	;1E89	2A 56 30 	* V 0 
	MOV	A,L	;1E8C	7D 	} 
	ORA	H	;1E8D	B4 	. 
	RET		;1E8E	C9 	. 
L1E8FH:
	LXI	H,L2F66H	;1E8F	21 66 2F 	. F / 
	SHLD	ACCLENP	;1E92	22 D6 20 	" .   
	CALL	CHHL	;1E95	CD 20 1E 	.   . 
	LDA	HASHC	;1E98	3A 4E 1D 	: N . 
	ANI	00FH	;1E9B	E6 0F 	. . 
	STA	HASHC	;1E9D	32 4E 1D 	2 N . 
	LXI	H,RBUFF	;H,L = 2E83 BUFFER
	SHLD	HASHP	;1EA3	;NEW HASH ENTRY BUFFER
	JMP	L1EB8H	;1EA6	C3 B8 1E 	. . . 
LOOKUP:
	CALL	CHASH	;1EA9	CD 1A 1E 	. . . 
	LXI	H,HASHT	;1EAC	21 4E 1C 	. N . 
	SHLD	HASHP	;1EAF	22 4F 1D 	" O . 
	LXI	H,ACCLEN;1EB2	21 08 30 	. . 0 
	SHLD	ACCLENP	;1EB5	22 D6 20 	" .   
L1EB8H:
	LHLD	ACCLENP	;1EB8	2A D6 20 	* .   
	MOV	A,M	;1EBB	7E 	~ 
	CPI	17	;1EBC	FE 11 	. . 
	JC	LENOK	;1EBE	DA C3 1E 	. . . 
	MVI	M,16	;1EC1	36 10 	6 . 
LENOK:
	LXI	H,HASHC	;LOOK FOR SYMBOL THROUGH HASH TABLE
	MOV	E,M
	MVI	D,0	;DOUBLE HASH CODE IN D,E
	LHLD	HASHP	;HASHP = RBUFF
	DAD	D	;
	DAD	D	;HASHT(HASHC)
	MOV	E,M	;LOW ORDER ADDRESS
	INX	H	;
	MOV	H,M	;
	MOV	L,E	;HEADER TO LIST OF SYMBOLS IN H,L
LOOK0:
	SHLD	SYADR
	CALL	FOUND
	RZ		;RETURN IF SYADR BECOMES ZERO
;
;	OTHERWISE EXAMINE CHARACTER STRING FOR MATCH
	CALL	GETLN	;1ED9	CD 3D 1E 	. = . 
	LHLD	ACCLENP	;1EDC	2A D6 20 	* .   
	CMP	M	;1EDF	BE 	. 
	JNZ	LCOMP	;1EE0	C2 F8 1E 	. . . 
	MOV	B,A	;1EE3	47 	G 
	INX	H	;1EE4	23 	# 
	XCHG	;1EE5	EB 	. 
	LHLD	SYADR	;1EE6	2A 56 30 	* V 0 
	INX	H	;1EE9	23 	# 
	INX	H	;1EEA	23 	# 
	INX	H	;1EEB	23 	# 
LOOK1:
	LDAX	D	;1EEC	1A 	. 
	CMP	M	;1EED	BE 	. 
	JNZ	LCOMP	;1EEE	C2 F8 1E 	. . . 
	INX	D	;1EF1	13 	. 
	INX	H	;1EF2	23 	# 
	DCR	B	;1EF3	05 	. 
	JNZ	LOOK1	;1EF4	C2 EC 1E 	. . . 
	RET		;1EF7	C9 	. 
LCOMP:
	LHLD	SYADR	;1EF8	2A 56 30 	* V 0 
	MOV	E,M	;1EFB	5E 	^ 
	INX	H	;1EFC	23 	# 
	MOV	D,M	;1EFD	56 	V 
	XCHG	;1EFE	EB 	. 
	JMP	LOOK0	;1EFF	C3 D2 1E 	. . . 
;
;
ENTER:	;ENTER SYMBOL IN ACCUMULATOR
;	ENSURE THERE IS ENOUGH SPACE INN THE TABLE
	LXI	H,ACCLEN	;1F02	21 08 30 	. . 0 
	MOV	E,M	;1F05	5E 	^ 
	MVI	D,0	;1F06	16 00 	. . 
	LHLD	SYTOP	;1F08	2A 4B 30 	* K 0 
	SHLD	SYADR	;1F0B	22 56 30 	" V 0 
	DAD	D	;1F0E	19 	. 
	LXI	D,FIXD	;1F0F	11 05 00 	. . . 
	DAD	D	;1F12	19 	. 
	XCHG	;1F13	EB 	. 
	LHLD	SYMAX	;1F14	2A 4D 30 	* M 0 
	MOV	A,E	;1F17	7B 	{ 
	SUB	L	;1F18	95 	. 
	MOV	A,D	;1F19	7A 	Z 
	SBB	H	;1F1A	9C 	. 
	XCHG	;NEW SYTOP IN H,L
	JNC	OVERER	;OVERFLOW IN TABLE
;
;	OTHERWISE NO ERROR
	SHLD	SYTOP	;SET NEW TABLE TOP
	LXI	H,HASHT	;1F22	21 4E 1C 	. N . 
	SHLD	HASHP	;1F25	22 4F 1D 	" O . 
	CALL	S1F31H	;1F28	CD 31 1F 	. 1 . 
	XRA	A	;1F2B	AF 	. 
	INX	H	;1F2C	23 	# 
	MOV	M,A	;1F2D	77 	W 
	INX	H	;1F2E	23 	# 
	MOV	M,A	;1F2F	77 	W 
	RET		;1F30	C9 	. 
S1F31H:
	LHLD	SYADR	;SYADR TO H,L
	XCHG		;SYADR TO D,E
	LXI	H,HASHC	;1F35	21 4E 1D 	. N . 
	MOV	C,M	;1F38	4E 	N 
	MVI	B,0	;1F39	06 00 	. . 
	LHLD	HASHP	;1F3B	2A 4F 1D 	* O . 
	DAD	B	;1F3E	09 	. 
	DAD	B	;1F3F	09 	. 
	MOV	C,M	;1F40	4E 	N 
	INX	H	;1F41	23 	# 
	MOV	B,M	;1F42	46 	F 
	MOV	M,D	;SAVE SYADR FOR HASH
	DCX	H
	MOV	M,E
	XCHG		;H,L=SYADR, D,E=HASHP
	MOV	M,C	;1F47	71 	Q 
	INX	H	;1F48	23 	# 
	MOV	M,B	;1F49	70 	P 
	LXI	D,ACCLEN	;1F4A	11 08 30 	. . 0 
	LDAX	D	;1F4D	1A 	. 
	CPI	011H	;1F4E	FE 11 	. . 
	JC	ENT1	;1F50	DA 55 1F 	. U . 
	MVI	A,010H	;1F53	3E 10 	> . 
ENT1:
	MOV	B,A	;1F55	47 	G 
	DCR	A	;1F56	3D 	= 
	INX	H	;1F57	23 	# 
	MOV	M,A	;1F58	77 	W 

ENT2:
	INX	H	;1F59	23 	# 
	INX	D	;1F5A	13 	. 
	LDAX	D	;1F5B	1A 	. 
	MOV	M,A	;1F5C	77 	W 
	DCR	B	;1F5D	05 	. 
	JNZ	ENT2	;1F5E	C2 59 1F 	. Y . 
	RET		;1F61	C9 	. 

S1F62H:
	LHLD	SYMAX	;1F62	2A 4D 30 	* M 0 
	XCHG	;1F65	EB 	. 
	LXI	H,ACCLEN	;1F66	21 08 30 	. . 0 
	MOV	L,M	;1F69	6E 	N 
	MVI	H,000H	;1F6A	26 00 	& . 
	DAD	B	;1F6C	09 	. 
	MOV	A,E	;1F6D	7B 	{ 
	SUB	L	;1F6E	95 	. 
	MOV	L,A	;1F6F	6F 	O 
	MOV	A,D	;1F70	7A 	Z 
	SBB	H	;1F71	9C 	. 
	MOV	H,A	;1F72	67 	G 
	SHLD	SYADR	;1F73	22 56 30 	" V 0 
	XCHG	;1F76	EB 	. 
	LXI	H,SYTOP	;1F77	21 4B 30 	. K 0 
	MOV	A,E	;1F7A	7B 	{ 
	SUB	M	;1F7B	96 	. 
	INX	H	;1F7C	23 	# 
	MOV	A,D	;1F7D	7A 	Z 
	SBB	M	;1F7E	9E 	. 
	JC	OVERER	;1F7F	DA F3 1F 	. . . 
	XCHG	;1F82	EB 	. 
	SHLD	SYMAX	;1F83	22 4D 30 	" M 0 
	RET		;1F86	C9 	. 
L1F87H:
	LXI	B,00001H	;1F87	01 01 00 	. . . 
	CALL	S1F62H	;1F8A	CD 62 1F 	. B . 
	LHLD	SYMAX	;1F8D	2A 4D 30 	* M 0 
	XCHG	;1F90	EB 	. 
	LXI	H,ACCLEN	;1F91	21 08 30 	. . 0 
	MOV	C,M	;1F94	4E 	N 
L1F95H:
	INX	H	;1F95	23 	# 
	MOV	A,C	;1F96	79 	Y 
	ORA	A	;1F97	B7 	. 
	JZ	L1FA2H	;1F98	CA A2 1F 	. . . 
	DCR	C	;1F9B	0D 	. 
	MOV	A,M	;1F9C	7E 	~ 
	STAX	D	;1F9D	12 	. 
	INX	D	;1F9E	13 	. 
	JMP	L1F95H	;1F9F	C3 95 1F 	. . . 
L1FA2H:
	XRA	A	;1FA2	AF 	. 
	STAX	D	;1FA3	12 	. 
	RET		;1FA4	C9 	. 
L1FA5H:
	LXI	B,00003H	;1FA5	01 03 00 	. . . 
	CALL	S1F62H	;1FA8	CD 62 1F 	. B . 
	LXI	H,RBUFF	;1FAB	21 83 2E 	. . . 
	SHLD	HASHP	;1FAE	22 4F 1D 	" O . 
	CALL	S1F31H	;1FB1	CD 31 1F 	. 1 . 
	LDA	HASHC	;1FB4	3A 4E 1D 	: N . 
	CALL	SETTY	;1FB7	CD 12 20 	. .   
	RET		;1FBA	C9 	. 
L1FBBH:
	LHLD	SYMAX	;1FBB	2A 4D 30 	* M 0 
	XCHG	;1FBE	EB 	. 
	LXI	H,L2F24H	;1FBF	21 24 2F 	. $ / 
	MOV	A,E	;1FC2	7B 	{ 
	SUB	M	;1FC3	96 	. 
	INX	H	;1FC4	23 	# 
	MOV	A,D	;1FC5	7A 	Z 
	SBB	M	;1FC6	9E 	. 
	RNC 		;1FC7	D0 	. 
	XCHG		;1FC8	EB 	. 
	SHLD	SYADR	;1FC9	22 56 30 	" V 0 
	CALL	GETTY	;1FCC	CD 24 20 	. $   
	MOV	E,A	;1FCF	5F 	_ 
	MVI	D,0	;1FD0	16 00 	. . 
	LXI	H,RBUFF	;H,L = 2E83 BUFFER
	DAD	D	;1FD5	19 	. 
	DAD	D	;1FD6	19 	. 
	XCHG	;1FD7	EB 	. 
	LHLD	SYADR	;1FD8	2A 56 30 	* V 0 
	MOV	A,M	;1FDB	7E 	~ 
	STAX	D	;1FDC	12 	. 
	INX	H	;1FDD	23 	# 
	MOV	A,M	;1FDE	7E 	~ 
	INX	D	;1FDF	13 	. 
	STAX	D	;1FE0	12 	. 
	CALL	VALADR	;1FE1	CD 31 20 	. 1   
L1FE4H:
	MOV	A,M	;1FE4	7E 	~ 
	ORA	A	;1FE5	B7 	. 
	INX	H	;1FE6	23 	# 
	JNZ	L1FE4H	;1FE7	C2 E4 1F 	. . . 
	SHLD	SYMAX	;1FEA	22 4D 30 	" M 0 
	JMP	L1FBBH	;1FED	C3 BB 1F 	. . . 
L1FF0H:
	JMP	VALADR	;1FF0	C3 31 20 	. 1   
OVERER:
	LXI	H,ERRSTO	;1FF3	21 FC 1F 	. . . 
	CALL	PCONE	;1FF6	CD 92 25 	. . % 
	JMP	EOR	;1FF9	C3 9E 25 	. . % 
ERRSTO:
	DB	'SYMBOL TABLE OVERFLOW',CR
;
SETTY:	;SET TYPE IN REG-A FOR CURRENT SYMBOL IN SYSADR
	RAL		;MOVE TYPE TO UPPER 4 BITS
	RAL
	RAL
	RAL
	ANI	0F0H
	MOV	B,A	;2018	47 	G 
	LHLD	SYADR	;HIGH COLLISSION
	INX	H	;LOW COLLISION
	INX	H	;TYPE
	MOV	A,M	;GET CURRENT VALUE
	ANI	00FH	;RETAIN LENGTH
	ORA	B	;ADD TYPE
	MOV	M,A	;SAVE
	RET
;
GETTY:	;RETURN THE TYPE OF VALUE IN CURRENT SYMBOL IN SYSADR
	LHLD	SYADR	;2024	2A 56 30 	* V 0 
	INX	H	;2027	23 	# 
	INX	H	;2028	23 	# 
	MOV	A,M	;2029	7E 	~ 
	RAR	;202A	1F 	. 
	RAR	;202B	1F 	. 
	RAR	;202C	1F 	. 
	RAR	;202D	1F 	. 
	ANI	00FH	;202E	E6 0F 	. . 
	RET		;2030	C9 	. 
;
VALADR:	;GET VALUE FIELD ADDRESS FOR CURRENT SYMBOL IN SYSADR
	CALL	GETLN	;PRINTNAME LENGTH TO REG-A
	LHLD	SYADR	;BASE ADDRESS
	MOV	E,A	;LENGTH TO REG-E
	MVI	D,0
	DAD	D	;BASE(LEN)
	INX	H
	INX	H	;FOR COLLISION FIELD
	INX	H	;FOR TYPE/LEN FIELD
	RET		;WITH H,L ADDRESSING VALUE FIELD
;
SETVAL:	;SET THE VALUE FIELD OF THE CURRENT SYMBOL TO H,L
;	VALUE IS SENT IN H,L
	PUSH	H	;SAVE VALUE TO SET
	CALL	VALADR	;VALUE ADDRESS IN H,L
	POP	D	;POP VALUE TO SET
	MOV	M,E	;SAVE LOW BYTE
	INX	H
	MOV	M,D	;SAVE HIGH BYTE
	RET
;
GETVAL:	;GET THE VALUE FIELD OF THE CURRENT SYMBOL AT H,L IN H,L
	CALL	VALADR	;ADDRESS OF VALUE FIELD TO H,L
	MOV	E,M
	INX	H
	MOV	D,M
	XCHG	
	RET

;
S2050H:
	CALL	VALADR	;2050	CD 31 20 	. 1   
	INX	H	;2053	23 	# 
	INX	H	;2054	23 	# 
	SHLD	L3058	;2055	22 58 30 	" X 0 
	RET		;2058	C9 	. 
;
L2059H:
	PUSH	PSW	;2059	F5 	. 
	CALL	S2050H	;205A	CD 50 20 	. P   
	POP	PSW	;205D	F1 	. 
	MOV	M,A	;205E	77 	W 
	RET		;205F	C9 	. 
;
L2060H:
	CALL	S2050H	;2060	CD 50 20 	. P   
	MOV	A,M	;2063	7E 	~ 
	RET		;2064	C9 	. 
L2065H:
	CALL	CHASH	;2065	CD 1A 1E 	. . . 
	ANI	00FH	;2068	E6 0F 	. . 
	ADD	A	;206A	87 	. 
	ADD	A	;206B	87 	. 
	ADD	A	;206C	87 	. 
	ADD	A	;206D	87 	. 
	MOV	C,A	;206E	4F 	O 
	LXI	H,ACCLEN	;206F	21 08 30 	. . 0 
	MOV	A,M	;2072	7E 	~ 
	CPI	011H	;2073	FE 11 	. . 
	JC	L207AH	;2075	DA 7A 20 	. Z   
	MVI	M,010H	;2078	36 10 	6 . 
L207AH:
	MOV	A,M	;207A	7E 	~ 
	DCR	A	;207B	3D 	= 
	ORA	C	;207C	B1 	. 
	CALL	L20BCH	;207D	CD BC 20 	. .   
	LXI	H,ACCLEN	;2080	21 08 30 	. . 0 
	MOV	C,M	;2083	4E 	N 
L2084H:
	INX	H	;2084	23 	# 
	MOV	A,M	;2085	7E 	~ 
	PUSH	B	;2086	C5 	. 
	PUSH	H	;2087	E5 	. 
	CALL	L20BCH	;2088	CD BC 20 	. .   
	POP	H	;208B	E1 	. 
	POP	B	;208C	C1 	. 
	DCR	C	;208D	0D 	. 
	JNZ	L2084H	;208E	C2 84 20 	. .   
	RET		;2091	C9 	. 
L2092H:
	CALL	L20B2H	;2092	CD B2 20 	. .   
	MOV	C,A	;2095	4F 	O 
	RLC	;2096	07 	. 
	RLC	;2097	07 	. 
	RLC	;2098	07 	. 
	RLC	;2099	07 	. 
	ANI	00FH	;209A	E6 0F 	. . 
	STA	HASHC	;209C	32 4E 1D 	2 N . 
	MOV	A,C	;209F	79 	Y 
	ANI	00FH	;20A0	E6 0F 	. . 
	INR	A	;20A2	3C 	< 
	MOV	C,A	;20A3	4F 	O 
	LXI	D,ACCLEN	;20A4	11 08 30 	. . 0 
	STAX	D	;20A7	12 	. 
L20A8H:
	CALL	L20B2H	;20A8	CD B2 20 	. .   
	INX	D	;20AB	13 	. 
	STAX	D	;20AC	12 	. 
	DCR	C	;20AD	0D 	. 
	JNZ	L20A8H	;20AE	C2 A8 20 	. .   
	RET		;20B1	C9 	. 
L20B2H:
	LHLD	L3058	;20B2	2A 58 30 	* X 0 
	INX	H	;20B5	23 	# 
	SHLD	L3058	;20B6	22 58 30 	" X 0 
	MOV	A,M	;20B9	7E 	~ 
	RET		;20BA	C9 	. 
	RET		;20BB	C9 	. 
L20BCH:
	MOV	C,A	;20BC	4F 	O 
	LHLD	L3058	;20BD	2A 58 30 	* X 0 
	INX	H	;20C0	23 	# 
	XCHG
	LHLD	SYMAX	;20C2	2A 4D 30 	* M 0 
	MOV	A,E	;20C5	7B 	{ 
	SUB	L	;20C6	95 	. 
	MOV	A,D	;20C7	7A 	Z 
	SBB	H	;20C8	9C 	. 
	JNC	OVERER	;20C9	D2 F3 1F 	. . . 
	XCHG
	SHLD	L3058	;20CD	22 58 30 	" X 0 
	MOV	M,C	;20D0	71 	Q 
	INX	H	;20D1	23 	# 
	SHLD	SYTOP	;20D2	22 4B 30 	" K 0 
	RET		;20D5	C9 	. 

ACCLENP:
	DB	0EBH	;20D6	EB 	. 
	DB	022H,0FEH,02CH	;20D7	22 FE 2C 	" . , 
	DB	0C2H,052H,016H	;20DA	C2 52 16 	. R . 
	DB	022H,0E2H,011H	;20DD	22 E2 11 	" . . 
	DB	0C3H,052H,016H	;20E0	C3 52 16 	. R . 
	DB	0	;20E3	00 	. 
	DB	0	;20E4	00 	. 
	DB	0	;20E5	00 	. 
	DB	0	;20E6	00 	. 
	DB	0	;20E7	00 	. 
	DB	0	;20E8	00 	. 
	DB	0	;20E9	00 	. 
	DB	0	;20EA	00 	. 
	DB	0	;20EB	00 	. 
	DB	0	;20EC	00 	. 
	DB	0	;20ED	00 	. 
	DB	0	;20EE	00 	. 
	DB	0	;20EF	00 	. 
	DB	0DAH,096H,007H	;20F0	DA 96 07 	. . . 
	DB	00DH	;20F3	0D 	. 
	DB	0CAH,096H,007H	;20F4	CA 96 07 	. . . 
	DB	0C3H,080H,007H	;20F7	C3 80 07 	. . . 
	DB	0	;20FA	00 	. 
	DB	0	;20FB	00 	. 
	DB	0	;20FC	00 	. 
	DB	0	;20FD	00 	. 
	DB	0	;20FE	00 	. 
	DB	0	;20FF	00 	. 

ENDAS3M	EQU	($ AND 0FF00H) + 100H

;;
;;
;; AS4SEAR.ASM
;;
;;
	TITLE	'ASM TABLE SEARCH MODULE'

	ORG 02100H

L2100H:
	JMP	02600H	;2100   C3 00 26
	JMP	BSEAR	;2103	C3 80 23 	. . # 
BGETE:
	JMP	BGET	;2106	C3 0D 24 	. . $ 
S2109H:
	JMP	L2462H	;2109	C3 62 24 	. B $ 
S210CH:
	JMP	L247BH	;210C	C3 7B 24 	. { $ 
L210FH:
	DB	0FCH	;210F

;
;       TABLE DEFINITIONS
;
;       TYPES
;
;       O1 THROUGH O15 DENOTE OPERATIONS
RT      EQU     25
PT      EQU     RT+1    ;RT IS REGISTER TYPE, PT IS PSEUDO OPERATION
OBASE   EQU     PT+1
O1      EQU     OBASE+1 ;SIMPLE
O2      EQU     OBASE+2 ;LXI
O3      EQU     OBASE+3 ;DAD
O4      EQU     OBASE+4 ;PUSH/POP
O5      EQU     OBASE+5 ;JMP/CALL
O6      EQU     OBASE+6 ;MOV
O7      EQU     OBASE+7 ;MVI
O8      EQU     OBASE+8 ;ACC IMMEDIATE
O9      EQU     OBASE+9 ;LDAX/STAX
O10     EQU     OBASE+10        ;LHLD/SHLD/LDA/STA
O11     EQU     OBASE+11        ;ACCUM REGISTER
O12     EQU     OBASE+12        ;INC/DEC
O13     EQU     OBASE+13        ;INX/DCX
O14     EQU     OBASE+14        ;RST
O15     EQU     OBASE+15        ;IN/OUT
;
;       X1 THROUGH X24 DENOTE OPERATORS
XBASE   EQU     0       ;START OF OPERATORS
X1      EQU     XBASE   ;*   0  00
X2      EQU     XBASE+1 ;/   1  01
X3      EQU     XBASE+2 ;MOD 2  02
X4      EQU     XBASE+3 ;SHL 3  03
X5      EQU     XBASE+4 ;SHR 4  04
X6      EQU     XBASE+5 ;+   5  05
X7      EQU     XBASE+6 ;-   6  06
X8      EQU     XBASE+7 ;UNARY - 7  07
X9      EQU     XBASE+8 ;EQ  8  08
X10     EQU     XBASE+9 ;LT  9  09
X11     EQU     XBASE+10;LE  10 0A
X12     EQU     XBASE+11;GT  11 0B
X13     EQU     XBASE+12;GE  12 0C
X14     EQU     XBASE+13;NE  13 0D
X15     EQU     XBASE+14;NOT 14 0E
X16     EQU     XBASE+15;AND 15 0F
X17     EQU     XBASE+16;OR  16 10
X18     EQU     XBASE+17;XOR 17 11
X19     EQU     XBASE+18;HIGH  18 12
X20     EQU     XBASE+19;LOW 19 13
X21     EQU     XBASE+20;(   20 14
X22     EQU     XBASE+21;)   21 15
X23     EQU     XBASE+22;,   22 16
X24     EQU     XBASE+23;CR  23 17
X25     EQU     XBASE+24;NUL 24 18

OPER	EQU	X25	;LAST OPERATOR

PLUS	EQU	X6	;PLUS OPERATOR
MINUS	EQU	X7	;MINUS OPERATOR
NOTF	EQU	X15	;NOT OPERATOR
HIGHF	EQU	X19	;HIGH OPERATOR
LOWF	EQU	X20	;LOW OPERATOR
LPAR	EQU	X21	;LEFT PARANTHESIS OPERATOR
RPAR	EQU	X22	;RIGHT PARANTHESIS OPERATOR
NULF	EQU	X25	;NUL OPERAND
;
;
;
;
;       RESERVED WORD TABLES
;

CINX:
	DW	CHAR1	;2110
	DW	CHAR2	;2112
	DW	CHAR3	;2114
	DW	CHAR4	;2116
	DW	CHAR5	;2118
	DW	CHAR6	;211A
	DW	CLEN	;211C
;
CMAX    EQU     ($-CINX)/2-1    ;LARGEST STRING TO MATCH
;
TVINX:
	DW	TV1	;211E
	DW	TV2	;2120
	DW	TV3	;2122
	DW	TV4	;2124
	DW	TV5	;2126
	DW	TV6	;2128

CHAR1:
	DB	CR	;212A	0D 	. 
	DB	'()'	;212B	28 29 	( ) 
	DB	'*+,'	;212D	2A 2B 2C 	* + , 
	DB	'-'	;2130	2D 	- 
	DB	'/'	;2131	2F 	/ 
	DB	'ABCDEHLM'	;2132	41 	A 
CHAR2:
	DB	'DB'	;213A	44 	D 
	DB	'DI'	;213C	44 	D 
	DB	'DS'	;213E	44 	D 
	DB	'DW'	;2140	44 	D 
	DB	'EI'	;2142	45 	E 
	DB	'EQ'	;2144	49 	I 
	DB	'GE'	;2146	45 	E 
	DB	'GT'	;2148	51 	Q 
	DB	'IF'	;214A	47 	G 
	DB	'IN'	;214C	45 	E 
	DB	'LE'	;214E	47 	G 
	DB	'LT'	;2150	54 	T 
	DB	'NE'	;2152	49 	I 
	DB	'OR'	;2154	46 	F 
	DB	'SP'	;2156	50 	P 
CHAR3:
	DB	'ACI'	;2158	49 	I 
	DB	'ADC'	;215B	41 	A 
	DB	'ADD'	;215E	41 	A 
	DB	'ADI'	;2161	41 	A 
	DB	'ANA'	;2164	41 	A 
	DB	'AND'	;2167	41 	A 
	DB	'ANI'	;216A	41 	A 
	DB	'CMA'	;216D	43 	C 
	DB	'CMC'	;2170	43 	C 
	DB	'CMP'	;2173	43 	C 
	DB	'CPI'	;2176	43 	C 
	DB	'DAA'	;2179	44 	D 
	DB	'DAD'	;217C	44 	D 
	DB	'DCR'	;217F	44 	D 
	DB	'DCX'	;2182	44 	D 
	DB	'END'	;2185	45 	E 
	DB	'EQU'	;2188	45 	E 
	DB	'HLT'	;218B	48 	H 
	DB	'INR'	;218E	49 	I 
	DB	'INX'	;2191	49 	I 
	DB	'IRP'	;2194	49 	I 
	DB	'JMP'	;2197	4A 	J 
	DB	'LDA'	;219A	4C 	L 
	DB	'LOW'	;219D	4C 	L 
	DB	'LXI'	;21A0	4C 	L 
	DB	'MOD'	;21A3	4D 	M 
	DB	'MOV'	;21A6	4D 	M 
	DB	'MVI'	;21A9	4D 	M 
	DB	'NOP'	;21AC	4E 	N 
	DB	'NOT'	;21AF	4E 	N 
	DB	'NUL'	;21B2	4E 	N 
	DB	'ORA'	;21B5	4F 	O 
	DB	'ORG'	;21B8	4F 	O 
	DB	'ORI'	;21BB	4F 	O 
	DB	'OUT'	;21BE	4F 	O 
	DB	'POP'	;21C1	50 	P 
	DB	'PSW'	;21C4	50 	P 
	DB	'RAL'	;21C7	52 	R 
	DB	'RAR'	;21CA	52 	R 
	DB	'RET'	;21CD	52 	R 
	DB	'RLC'	;21D0	52 	R 
	DB	'RRC'	;21D3	52 	R 
	DB	'RST'	;21D6	52 	R 
	DB	'SBB'	;21D9	53 	S 
	DB	'SBI'	;21DC	53 	S 
	DB	'SET'	;21DF	53 	S 
	DB	'SHL'	;21E2	53 	S 
	DB	'SHR'	;21E5	53 	S 
	DB	'STA'	;21E8	53 	S 
	DB	'STC'	;21EB	53 	S 
	DB	'SUB'	;21EE	53 	S 
	DB	'SUI'	;21F1	53 	S 
	DB	'XOR'	;21F4	58 	X 
	DB	'XRA'	;21F7	58 	X 
	DB	'XRI'	;21FA	58 	X 
CHAR4:
	DB	'ASEG'	;21FD	41 	A 
	DB	'CALL'	;2201	43 	C 
	DB	'CSEG'	;2205	43 	C 
	DB	'DSEG'	;2209	44 	D 
	DB	'ELSE'	;220D	45 	E 
	DB	'ENDM'	;2211	45 	E 
	DB	'HIGH'	;2215	48 	H 
	DB	'IRPC'	;2219	49 	I 
	DB	'LDAX'	;221D	4C 	L 
	DB	'LHLD'	;2221	4C 	L 
	DB	'NAME'	;2225	4E 	N 
	DB	'PAGE'	;2229	50 	P 
	DB	'PCHL'	;222D	50 	P 
	DB	'PUSH'	;2231	50 	P 
	DB	'REPT'	;2235	52 	R 
	DB	'SHLD'	;2239	53 	S 
	DB	'SPHL'	;223D	53 	S 
	DB	'STAX'	;2241	53 	S 
	DB	'XCHG'	;2245	58 	X 
	DB	'XTHL'	;2249	58 	X 
CHAR5:
	DB	'ENDIF'	;224D	45 	E 
	DB	'EXITM'	;2252	45 	E 
	DB	'EXTRN'	;2257	45 	E 
	DB	'LOCAL'	;225C	4C 	L 
	DB	'MACRO'	;2261	4D 	M 
	DB	'STKLN'	;2266	53 	S 
	DB	'TITLE'	;226B	54 	T 
CHAR6:
	DB	'INPAGE'	;2270	49 	I 
	DB	'MACLIB'	;2276	4D 	M 
	DB	'PUBLIC'	;227C	50 	P 

CHAR7:	;END OF CHARACTER VECTOR

CLEN:	;LENGTH VECTOR GIVES THE NUMBER OF ITEMS IN EACH TABLE
	DB	(CHAR2-CHAR1)	;2282
	DB	(CHAR3-CHAR2)/2	;2283
	DB	(CHAR4-CHAR3)/3	;2284
	DB	(CHAR5-CHAR4)/4	;2285
	DB	(CHAR6-CHAR5)/5 	;2286
	DB	(CHAR7-CHAR6)/6	;2287

TV1:	;TYPE,VALUE PAIRS FOR CHAR1 VECTOR
	DB	X24,0AH,	X21,014H	;CR (
	DB	X22,01EH,	X1,050H		;) *
	DB	X6,046H,	X23,00AH	;+ ,
	DB	X7,046H,	X2,050H		;- /
	DB	RT,007H,	RT,000H		;A B
	DB	RT,001H,	RT,002H		;C D
	DB	RT,003H,	RT,004H		;E H
	DB	RT,005H,	RT,006H		;L M
TV2:	;TYPE,VALUE PAIRS FOR CHAR2 VECTOR
	DB	PT,001H,	O1,0F3H		;DB DI
	DB	PT,002H,	PT,003H		;DS DW
	DB	O1,0FBH,	X9,041H		;EI EQ
	DB	X13,041H,	X12,041H	;GE GT
	DB	PT,008H,	02AH,0DBH	;IF IN
	DB	X11,041H,	X10,041H	;LE LT
	DB	X14,041H,	X17,028H	;NE OR
	DB	RT,006H				;SP
TV3:	;TYPE,VALUE PAIRS FOR CHAR3 VECTOR
	DB	023H,0CEH,	026H,088H	;ACI ADC
	DB	026H,080H,	023H,0C6H	;ADD ADI
	DB	026H,0A0H,	00FH,032H	;ANA AND
	DB	023H,0E6H,	01CH,02FH	;ANI CMA
	DB	01CH,03FH,	026H,0B8H	;CMC CMP
	DB	023H,0FEH,	01CH,027H	;CPI DAA
	DB	01EH,009H,	027H,005H	;DAD DCR
	DB	028H,00BH,	PT,004H		;DCX END
	DB	PT,007H,	01CH,076H	;EQU HLT
	DB	027H,004H,	028H,003H	;INR INX
	DB	PT,00EH,	020H,0C3H	;IRP JMP
	DB	025H,03AH,	013H,01EH	;LDA LOW
	DB	01DH,001H,	002H,050H	;LXI MOD
	DB	021H,040H,	022H,006H	;MOV MVI
	DB	01CH,000H,	00EH,03CH	;NOP NOT
	DB	018H,000H,	026H,0B0H	;NUL ORA
	DB	PT,00AH,	023H,0F6H	;ORG ORI
	DB	02AH,0D3H,	01FH,0C1H	;OUT POP
	DB	RT,006H,	01CH,017H	;PSW RAL
	DB	01CH,01FH,	01CH,0C9H	;RAR RET
	DB	01CH,007H,	01CH,00FH	;RLC RRC
	DB	029H,0C7H,	026H,098H	;RST SBB
	DB	023H,0DEH,	PT,00BH		;SBI SET
	DB	003H,050H,	004H,050H	;SHL SHR
	DB	025H,032H,	01CH,037H	;STA STC
	DB	026H,090H,	023H,0D6H	;SUB SUI
	DB	011H,028H,	026H,0A8H	;XOR XRA
	DB	023H,0EEH			;XRI
TV4:	;;TYPE,VALUE PAIRS FOR CHAR4 VECTOR
	DB	PT,00DH,	020H,0CDH	;ASEG CALL   SHOULD BE PT,011H??
	DB	PT,012H,	PT,013H		;CSEG DSEG
	DB	PT,00DH,	PT,006H		;ELSE ENDM
	DB	012H,01EH,	PT,00FH		;HIGH IRPC
	DB	024H,00AH,	025H,02AH	;LDAX LHLD
	DB	PT,014H,	PT,015H		;NAME PAGE
	DB	01CH,0E9H,	01FH,0C5H	;PCHL PUSH
	DB	PT,010H,	025H,022H	;REPT SHLD
	DB	01CH,0F9H,	024H,002H	;SPHL STAX
	DB	01CH,0EBH,	01CH,0E3H	;XCHG XTHL
TV5:	;TYPE,VALUE PAIRS FOR CHAR5 VECTOR
	DB	PT,005H,	PT,016H		;ENDIF EXITM
	DB	PT,017H,	PT,018H		;EXTRN LOCAL
	DB	PT,009H,	PT,01CH		;MACRO STKLN
	DB	PT,00CH				;TITLE
TV6:	;TYPE,VALUE PAIRS FOR CHAR6 VECTOR
	DB	PT,019H,	PT,01AH		;INPAGE MACLIB
	DB	PT,01BH				;PUBLIC

SUFTAB:
	DB	'NZZ NCC POPEP M '
;
BSEAR:	;BINARY SEARCH MNEMONIC TABLE
;	INPUT: UR = UPPER BOUND OF TABLE (I.E., TABLE LENGTH-1)
;	SR = SIZE OF EACH TABLE ELEMENT
;	H,L ADDRESS BASE OF TABLE TO SEARCH
;	OUTPUT: ZERO FLAG INDICATES MATCH WAS FOUND, IN WHICH CASE
;	THE ACCUMULATOR CONTAINS AN INDEX TO THE ELEMENT
;	NOT ZERO FLAG INDICATES NO MATCH FOUND IN TABLE
;

UR	EQU	B	;UPPER BOUND REGISTER
LR	EQU	C	;LOWER BOUND REGISTER
SR	EQU	D	;SIZE REGISTER
MR	EQU	E	;MIDDLE POINTER REGISTER
SP1	EQU	B	;SIZE PRIME, USED IN COMPUTING MIDDLE POSITON
SP1P	EQU	C	;ANOTHER COPY OF SIZE PRIME
KR	EQU	H	;K
;

	MVI	MR,255	;MARK M <> OLD M
	INR	UR	;U=U+1
	MVI	LR,0	;L = 0
;
;	COMPUTE M' = (U+L)/2
NEXT:
	XRA	A
	MOV	A,UR	;CY=0, A=U
	ADD	LR	;(U+L)
	RAR		;(U+L)/2
	CMP	MR	;SAME AS LAST TIME THROUGH?
	JZ	NMATCH	;JUMP IF = TO NO MATCH
;
;	MORE ELEMENTS TO SCAN
	MOV	MR,A	;NEW MIDDLE VALUE
	PUSH	H	;SAVE A COPY OF THE BASE ADDRESS
	PUSH	D	;SAVE S,M
	PUSH	B	;SAVE U,L
	PUSH	H	;SAVE ANOTHER COPY OF THE BASE ADDRESS
	MOV	SP1,SR	;S' = S
	MOV	SP1P,SP1;S'' = S1
	MVI	SR,0	;FOR DOUBLE PRECISION OPERATION BELOW (DOUBLE M)
	LXI	KR,0	;K=0
SUMK:
	DAD	D	;K = K + M
	DCR	SP1	;S' = S' - 1
	JNZ	SUMK	;DECREMENT IF SP1 <> 0
;
;	K IS NOW RELATIVE TO BYTE POSITION
	POP	D	;TABLE BASE ADDRESS
	DAD	D	;H,L CONTAINS ABS ADDRESS OF BYTE TO COMP
	LXI	D,ACCUM	;D,E ADDRESS CHARACTERS TO COMPARE
;
COMK:	;COMPARE NEXT CHARACTER
	LDAX	D	;ACCUM CHAR TO REG A
	CMP	M	;SAME AS TABLE ENTRY?
	INX	D
	INX	H	;TO NEXT POSITIONS
	JNZ	NOCOM	;JUMP IF NOT THE SAME
	DCR	SP1P	;MORE CHARACTERS?
	JNZ	COMK
;
;	COMPLETE MATCH AT M
	POP	B
	POP	D	;M RESTORED
	POP	H
	MOV	A,MR	;VALUE OF M COPIED IN A
	RET		;WITH ZERO FLAG SET
;
NOCOM:
	POP	B	;U,L
	POP	D	;S,M
	POP	H	;TABLE ADDRESS
	JC	NCOML
;	ACCUM IS HIGHER
	MOV	LR,MR	;L = M
	JMP	NEXT
;
NCOML:	;ACCUMULATOR IS LOW
	MOV	UR,MR	;U = M
	JMP	NEXT
;
NMATCH:	;NO MATCH
	XRA	A
	INR	A	;SETS NOT ZERO FLAG
	RET
;
PREFIX:	;J C OR R PREFIX?
	LDA	ACCUM
	LXI	B,0C220H;JNZ OPCODE TO B, TYPE TO C
	CPI	'J'
	RZ		;RETURN WITH ZERO FLAG SET IF J
	MVI	B,0C4H	;CNZ OPCODE TO B, TYPE IS IN C
	CPI	'C'
	RZ
	LXI	B,0C01CH;RNZ OPCODE
	CPI	'R'
	RET
;
SUFFIX:	;J R OR C RECOGNIZED, LOOK FOR SUFFIX
	LDA	ACCLEN
	CPI	004H	;CHECK LENGTH
	JNC	NSUFF	;CARRY IF 0,1,2,3 IN LENGTH
	CPI	003H
	JZ	SUF0	;ASSUME 1 OR 2 IF NO BRANCH
	CPI	002H
	JNZ	NSUFF	;RETURNS IF 0 OR 1

	LXI	H,ACCUM+2
	MVI	M,' '	;BLANK-OUT FOR MATCH ATTEMPT
SUF0:	;SEARCH 'TIL END OF TABLE
	LXI	B,8	;B=0, C=8 COUNTS TABLE DOWN TO ZERO OR MATCH
	LXI	D,SUFTAB
NEXTS:	;LOOK AT NEXT SUFFIX
	LXI	H,ACCUM+1	;SUFFIX POSITION
	LDAX	D		;CHARACTER TO ACCUM
	CMP	M
	INX	D		;READY FOR NEXT CHARACTER
	JNZ	NEXT0		;JMP IF NO MATCH
	LDAX	D		;GET NEXT CHARACTER
	INX	H		;READY FOR COMPARE WITH ACCUM
	CMP	M		;SAME?
	RZ			;RETURN WITH ZERO FLAG SET, B IS SUFFIX
NEXT0:	INX	D		;MOVE TO NEXT CHARACTER
	INR	B		;COUNT SUFFIX UP
	DCR	C		;COUNT TABLE LENGTH DOWN
	JNZ	NEXTS
;	END OF TABLE, MARK WITH NON ZERO FLAG
	INR	C
	RET			;2409
;
NSUFF:	;NOT PROPER SUFFIX - SET NON ZERO FLAG
	XRA	A
	INR	A
	RET
;
BGET:   ;PERFORM BINARY SEARCH, AND EXTRACT TYPE AND VAL FIELDS	FOR
;       THE ITEM.  ZERO FLAG INDICATES MATCH WAS FOUND, WITH TYPE
;       IN THE ACCUMULATOR, AND VAL IN REGISTER B.  THE SEARCH IS BASED
;       UPON THE LENGTH OF THE ACCUMULATOR
	LDA	ACCLEN	;ITEM LENGTH
	MOV	C,A	;SAVE A COPY
	DCR	A	;ACCLEN-1
	MOV	E,A
	MVI	D,0	;DOUBLE ACCLEN-1 TO D,E
	PUSH	D	;SAVE A COPY FOR LATER
	CPI	CMAX	;TOO LONG?
	JNC	NGET	;NOT IN RANGE IF CARRY
	LXI	H,CLEN	;LENGTH VECTOR
	DAD	D
	MOV	UR,M	;FILL UPPER BOUND FROM MEMORY
	LXI	H,CINX
	DAD	D
	DAD	D	;BASE ADDRESS TO H,L
	MOV	D,M
	INX	H
	MOV	H,M
	MOV	L,D	;NOW IN H,L
	MOV	SR,C	;FILL THE SIZE REGISTER
	CALL	BSEAR	;PERFORM THE BINARY SEARCH
	JNZ	SCASE	;ZERO IF FOUND
	STA	L210FH
	POP	D	;RESTORE INDEX
	LXI	H,TVINX
	DAD	D
	DAD	D	;ADDRESSING PROPER TV ELEMENT
	MOV	E,M
	INX	H
	MOV	D,M
;       D,E IS BASE ADDRESS OF TYPE/VALUE VECTOR, ADD	DISPLACEMENT
	MOV	L,A
	MVI	H,000H
	DAD	H	;DOUBLED
	DAD	D	;INDEXED
	XRA	A
	MOV	C,A
	MOV	A,M	;TYPE TO ACC
	INX	H
	MOV	B,M	;VALUE TO B
	RET		;TYPE IN ACC, VALUE IN B
;
SCASE:	;NAME NOT TOO LONG, BUT NOT FOUND IN TABLES, MAY BE J C OR R
	POP	D	;RESTORE INDEX
	CALL	PREFIX
	RNZ		;NOT FOUND AS PREFIX J C OR R IF NOT ZERO
	PUSH	B	;SAVE VALUE AND TYPE
	CALL	SUFFIX	;ZERO IF SUFFIX MATCHED
	MOV	A,B	;READY FOR MASK IF ZERO FLAG
	POP	B	;RECALL VALUE AND TYPE
	RNZ		;RETURN IF NOT ZERO FLAG SET
	ORA	A	;CLEAR CARRY
	RAL
	RAL
	RAL
	ORA	B	;VALUE SET TO JNZ ...
	MOV	B,A	;REPLACE
	MOV	A,C	;RETURN WITH TYPE IN REGISTER A
	CMP	A	;CLEAR THE ZERO FLAG
	MVI	C,001H
	RET		;245D
;
NGET:	;CAN'T FIND THE ENTRY, RETURN WITH ZERO FLAG RESET
	POP	D	;GET THE ELEMENT BACK
	XRA	A	;CLEAR
	INR	A	;ZERO FLAG RESET
	RET		;2461

L2462H:
	LXI	H,ACCLEN	;2462	21 08 30 	. . 0 
	MOV	C,M	;2465	4E 	N 
	DCR	C	;2466	0D 	. 
	LXI	H,CLEN+1	;2467	21 83 22 	. . " 
	XRA	A	;246A	AF 	. 
L246BH:
	DCR	C	;246B	0D 	. 
	JZ	L2474H	;246C	CA 74 24 	. T $ 
	ADD	M	;246F	86 	. 
	INX	H	;2470	23 	# 
	JMP	L246BH	;2471	C3 6B 24 	. K $ 
L2474H:
	LXI	H,L210FH	;2474	21 0F 21 	. . . 
	ADD	M	;2477	86 	. 
	ORI	080H	;2478	F6 80 	. . 
	RET		;247A	C9 	. 
L247BH:
	ANI	07FH	;247B	E6 7F 	.  
	LXI	H,L2499H	;247D	21 99 24 	. . $ 
L2480H:
	MOV	E,A	;2480	5F 	_ 
	MVI	D,000H	;2481	16 00 	. . 
	DAD	D	;2483	19 	. 
	DAD	D	;2484	19 	. 
L2485H:
	MOV	E,M	;2485	5E 	^ 
	INX	H	;2486	23 	# 
	MOV	A,M	;2487	7E 	~ 
	RAR	;2488	1F 	. 
	RAR	;2489	1F 	. 
L248AH:
	RAR	;248A	1F 	. 
	RAR	;248B	1F 	. 
	ANI	00FH	;248C	E6 0F 	. . 
	MOV	B,A	;248E	47 	G 
L248FH:
	MOV	A,M	;248F	7E 	~ 
	ANI	00FH	;2490	E6 0F 	. . 
	MOV	D,A	;2492	57 	W 
	LXI	H,CHAR2	;2493	21 3A 21 	. : . 
	DAD	D	;2496	19 	. 
	MOV	A,B	;2497	78 	X 
	RET		;2498	C9 	. 
L2499H:
	NOP	;2499	00 	. 
	DW	00220H	;249A	20 02 	  . 
	DW	00420H	;249C	20 04 	  . 
L249EH:
	DW	00620H	;249E	20 06 	  . 
	DW	00820H	;24A0	20 08 	  . 
L24A2H:
	DW	00A20H	;24A2	20 0A 	  . 
	DW	00C20H	;24A4	20 0C 	  . 
L24A6H:
	DW	00E20H	;24A6	20 0E 	  . 
L24A8H:
	DW	01020H	;24A8	20 10 	  . 
L24AAH:
	DW	01220H	;24AA	20 12 	  . 
	DW	01420H	;24AC	20 14 	  . 
L24AEH:
	DW	01620H	;24AE	20 16 	  . 
	DW	01820H	;24B0	20 18 	  . 
L24B2H:
	DW	01A20H	;24B2	20 1A 	  . 
	DW	01C20H	;24B4	20 1C 	  . 
L24B6H:
	DW	01E20H	;24B6	20 1E 	  . 
	DW	02130H	;24B8	30 21 	0 . 
L24BAH:
	DW	02430H	;24BA	30 24 	0 $ 
L24BCH:
	DW	02730H	;24BC	30 27 	0 ' 
L24BEH:
	DW	02A30H	;24BE	30 2A 	0 * 
	DW	02D30H	;24C0	30 2D 	0 - 
L24C2H:
	DW	03030H	;24C2	30 30 	0 0 
	DW	03330H	;24C4	30 33 	0 3 
L24C6H:
	DW	03630H	;24C6	30 36 	0 6 
	DW	03930H	;24C8	30 39 	0 9 
L24CAH:
	DW	03C30H	;24CA	30 3C 	0 < 
	DW	03F30H	;24CC	30 3F 	0 ? 
L24CEH:
	DW	04230H	;24CE	30 42 	0 B 
L24D0H:
	DW	04530H	;24D0	30 45 	0 E 
L24D2H:
	DW	04830H	;24D2	30 48 	0 H 
	DW	04B30H	;24D4	30 4B 	0 K 
L24D6H:
	DW	04E30H	;24D6	30 4E 	0 N 
	DW	05130H	;24D8	30 51 	0 Q 
L24DAH:
	DW	05430H	;24DA	30 54 	0 T 
	DW	05730H	;24DC	30 57 	0 W 
	DW	05A30H	;24DE	30 5A 	0 Z 
L24E0H:
	DW	05D30H	;24E0	30 5D 	0 ] 
	DW	06030H	;24E2	30 60 	0 ` 
L24E4H:
	DW	06330H	;24E4	30 63 	0 C 
	DW	06630H	;24E6	30 66 	0 F 
	DW	06930H	;24E8	30 69 	0 I 
L24EAH:
	DW	06C30H	;24EA	30 6C 	0 L 
	DW	06F30H	;24EC	30 6F 	0 O 
	DW	07230H	;24EE	30 72 	0 R 
	DW	07530H	;24F0	30 75 	0 U 
	DW	07830H	;24F2	30 78 	0 X 
L24F4H:
	DW	07B30H	;24F4	30 7B 	0 { 
	DW	07E30H	;24F6	30 7E 	0 ~ 
	DW	08130H	;24F8	30 81 	0 . 
	DW	08430H	;24FA	30 84 	0 . 
	DW	08730H	;24FC	30 87 	0 . 
L24FEH:
	DW	08A30H	;24FE	30 8A 	0 . 
	DW	08D30H	;2500	30 8D 	0 . 
	DW	09030H	;2502	30 90 	0 . 
	DW	09330H	;2504	30 93 	0 . 
	DW	09630H	;2506	30 96 	0 . 
L2508H:
	DW	09930H	;2508	30 99 	0 . 
	DW	09C30H	;250A	30 9C 	0 . 
	DW	09F30H	;250C	30 9F 	0 . 
	DW	0A230H	;250E	30 A2 	0 . 
	DW	0A530H	;2510	30 A5 	0 . 
L2512H:
	DW	0A830H	;2512	30 A8 	0 . 
	DW	0AB30H	;2514	30 AB 	0 . 
	DW	0AE30H	;2516	30 AE 	0 . 
	DW	0B130H	;2518	30 B1 	0 . 
	DW	0B430H	;251A	30 B4 	0 . 
L251CH:
	DW	0B730H	;251C	30 B7 	0 . 
	DW	0BA30H	;251E	30 BA 	0 . 
	DW	0BD30H	;2520	30 BD 	0 . 
	DW	0C030H	;2522	30 C0 	0 . 
	DW	0C330H	;2524	30 C3 	0 . 
L2526H:
	DB	040H	;2526	40 	@ 
	DB	0C7H	;2527	C7 	. 
	DB	040H	;2528	40 	@ 
	DB	0CBH,040H	;2529	CB 40 	. @ 
L252BH:
	RST 1	;252B	CF 	. 
	MOV	B,B	;252C	40 	@ 
	DB	0D3H	;252D	D3 	. 
	MOV	B,B	;252E	40 	@ 
	RST 2	;252F	D7 	. 
L2530H:
	MOV	B,B	;2530	40 	@ 
	IN 040H	;2531	DB	40 	. @ 
	RST 3	;2533	DF 	. 
	MOV	B,B	;2534	40 	@ 
L2535H:
	XTHL	;2535	E3 	. 
	MOV	B,B	;2536	40 	@ 
	RST 4	;2537	E7 	. 
	MOV	B,B	;2538	40 	@ 
	XCHG	;2539	EB 	. 
L253AH:
	MOV	B,B	;253A	40 	@ 
	RST 5	;253B	EF 	. 
	MOV	B,B	;253C	40 	@ 
	DI	;253D	F3 	. 
	MOV	B,B	;253E	40 	@ 
L253FH:
	RST 6	;253F	F7 	. 
	MOV	B,B	;2540	40 	@ 
	EI	;2541	FB 	. 
	MOV	B,B	;2542	40 	@ 
	RST 7	;2543	FF 	. 
L2544H:
	MOV	B,B	;2544	40 	@ 
	INX	B	;2545	03 	. 
	MOV	B,C	;2546	41 	A 
	RLC	;2547	07 	. 
	MOV	B,C	;2548	41 	A 
L2549:
	DB	00BH	;2549	0B 	. 
	MOV	B,C	;254A	41 	A 
	RRC	;254B	0F 	. 
L254CH:
	MOV	B,C	;254C	41 	A 
L254DH:
	INX	D	;254D	13 	. 
L254EH:
	MOV	D,C	;254E	51 	Q 
	DW	05118H	;254F	18 51 	. Q 
	DCR	E	;2551	1D 	. 
	MOV	D,C	;2552	51 	Q 
L2553H:
	SHLD	02751H	;2553	22 51 27 	" Q ' 
	MOV	D,C	;2556	51 	Q 
	INR	L	;2557	2C 	, 
L2558H:
	MOV	D,C	;2558	51 	Q 
	LXI	SP,03651H	;2559	31 51 36 	1 Q 6 
	MOV	H,C	;255C	61 	A 
L255DH:
	INR	A	;255D	3C 	< 
	MOV	H,C	;255E	61 	A 
	MOV	B,D	;255F	42 	B 
	MOV	H,C	;2560	61 	A 
	MOV	E,B	;2561	58 	X 
L2562H:
	DW	02230H	;2562	30 22 	0 " 
	CMP	L	;2564	BD 	. 
	LXI	D,SMAC3	;2565	11 CD 06 	. . . 
	MVI	D,0C3H	;2568	16 C3 	. . 
	MOV	D,A	;256A	57 	W 
	RLC	;256B	07 	. 
L256CH:
	MOV	A,D	;256C	7A 	Z 
	MOV	A,E	;256D	7B 	{ 
	MOV	A,H	;256E	7C 	| 
	MOV	A,L	;256F	7D 	} 
	XRA	A	;2570	AF 	. 
L2571H:
	MOV	C,A	;2571	4F 	O 
	MOV	A,M	;2572	7E 	~ 
	INX	H	;2573	23 	# 
	MOV	B,M	;2574	46 	F 
	RET		;2575	C9 	. 
L2576H:
	MOV	A,C	;2576	79 	Y 
	MVI	C,001H	;2577	0E 01 	. . 
	CMP	A	;2579	BF 	. 
	RET		;257A	C9 	. 

;
; THESE DB ARE TO MAKE THE ORIGINAL MAC.COM MATCH BYTE FOR BYTE
; WHEN COMPARING THIS VERSION AND CAN BE REMOVED WHEN DONE
;
L257BH:	DB	053H,045H,041H,052H,020H

ENDAS4M	EQU	$

;;
;; AS1IO
;;
	TITLE	'ASM IO MODULE'
;	I/O MODULE FOR CP/M ASSEMBLER
;
	ORG	2580H

INITIO:
	JMP	INIT	;2580	C3 F6 26 	. . & 
S2583H:
	JMP	SETUP	;2583	C3 05 29 	. . ) 
S2586H:
	JMP	GNC	;2586	C3 4C 29 	. L ) 
	JMP	PNC	;2589	C3 0E 2A 	. . * 
	JMP	PNB	;258C	C3 95 2A 	. . * 
	JMP	PCHAR	;258F	C3 C9 2A 	. . * 
PCONE:
	JMP	PCON	;2592	C3 78 26 	. X & 
S2595H:
	JMP	L2B74H	;2595	C3 74 2B 	. T + 
PERR:
	JMP	L2C21H	;2598	C3 21 2C 	. . , 
DHEXE:
	JMP	DHEX	;259B	C3 A3 2D 	. . - 
EOR:
	JMP	L2C8BH	;259E	C3 8B 2C 	. . , 
S25A1H:
	JMP	L2C49H	;25A1	C3 49 2C 	. I , 
OMACLBE:
	JMP	OMACLB	;25A4	C3 A1 26 	. . & 
S25A7H:
	JMP	L26E1H	;25A7	C3 E1 26 	. . & 
S25AAH:
	JMP	L2B4DH	;25AA	C3 4D 2B 	. M + 
S25ADH:
	JMP	L2AF9H	;25AD	C3 F9 2A 	. . * 
PAGEN:	DB	080H	;PAGE NUMBER STRING
	DB	0	;25B1	00 	. 
	DB	0	;25B2	00 	. 
LINES:	DB	0	;LINES PER PAGE
LINEC:	DB	0	;LINE COUNT
PARM1:
	DB	0	;25B5	00 	. 
BPC:
	DW	0	;25B6	00 00 	. 
DBL:
	DB	0	;25B8	00 	. 
DBUFF:
;	DB	0,0,0,0,0,0,0,0	;25B9	00 	. 
;	DB	0,0,0,0,0,0,0,0	;25C1	00 	. 
;
; THESE DB ARE TO MAKE THE ORIGINAL MAC.COM MATCH BYTE FOR BYTE
; WHEN COMPARING THIS VERSION AND CAN BE REMOVED WHEN DONE
;
	DB	000H,000H,000H,000H,019H,000H,000H,000H	;25B9	00 	. 
	DB	037H,00EH,01AH,0C3H,005H,000H,011H,080H

;	DISK NAMES
CDISK:	DB	0	;CURRENTLY SELECTED DISK
ADISK:	DS	1	;.ASM DISK	25CA
PDISK:	DS	1	;.PRN DISK	25CB
SDISK	DS	1	;.SYM DISK	25CC
HDISK:	DS	1	;.HEX DISK	25CD
LDISK:	DS	1	;.LIB DISK	25CE
	DS	1

MBC:	DW	0	;MACRO BUFFER COUNTER

PCNT:
	DS	1	;25D2	77 	W 
;
;	FILE CONTROL BLOCKS, BUFFERS AND POINTERS
SCB:
	DS	1	;25DE	4D 	M 
	DS	8
	DB	'ASM'
SCBR:	DB	0
	DS	19
SCBCR:	DS	1	;25F5	04 	. 

SBP:	DW	SSIZE	;NEXT CHARACTER POSITION TO READ
SBUFF:	DS	2

PCB:
	DS	1	;
	DS	8	;PCB FILENAME
PCBT:
	DB	'PRN',0	;2601	50 	P 
	DS	19	;260B	FF 	. 
PCBR:
	DB	0

PBP:	DS	2
PBUFF:	DS	2

HCB:
	DS	1	;261D	FF 	. 
	DS	8	;261D	FF 	. 
	DB	'HEX',0	;2626	48 	H 
	DS	19	;262A	FF 	. 
	DB	0

HBP:	DW	0	;263E	00 00 	. 
HBUFF:	DS	2

SDMA:
	MVI	C,SETDM	;2642	0E 1A 	. . 
	JMP	BDOS	;2644	C3 05 00 	. . . 
;
SETBF:	;SET DMA TO BUFF
	LXI	D,BUFF	;2647	11 80 00 	. . . 
	JMP	SDMA	;264A	C3 42 26 	. B & 
;
SEL:
	LXI	H,CDISK	;264D	21 C9 25 	. . % 
	CMP	M	;2650	BE 	. 
	RZ	;2651	C8 	. 
	MOV	M,A	;2652	77 	W 
	MOV	E,A	;2653	5F 	_ 
	MVI	C,SELECT	;2654	0E 0E 	. . 
	CALL	BDOS	;2656	CD 05 00 	. . . 
	RET		;2659	C9 	. 
SELA:
	LDA	ADISK	;265A	3A CA 25 	: . % 
	JMP	SEL	;265D	C3 4D 26 	. M & 
SELP:
	LDA	PDISK	;2660	3A CB 25 	: . % 
	JMP	SEL	;2663	C3 4D 26 	. M & 
SELS:
	LDA	SDISK	;2666	3A CC 25 	: . % 
	JMP	SEL	;2669	C3 4D 26 	. M & 
SELH:
	LDA	HDISK	;266C	3A CD 25 	: . % 
	JMP	SEL	;266F	C3 4D 26 	. M & 
SELL:
	LDA	LDISK	;2672	3A CE 25 	: . % 
	JMP	SEL	;2675	C3 4D 26 	. M & 
PCON:
	MOV	A,M	;2678	7E 	~ 
	CALL	PCHAR	;2679	CD C9 2A 	. . * 
	MOV	A,M	;267C	7E 	~ 
	INX	H	;267D	23 	# 
	CPI	CR	;267E	FE 0D 	. . 
	JNZ	PCON	;2680	C2 78 26 	. X & 
	MVI	A,LF	;2683	3E 0A 	> . 
	CALL	PCHAR	;2685	CD C9 2A 	. . * 
	RET		;2688	C9 	. 
FNAME:	;FILL NAME FROM DEFAULT FILE CONTROL BLOCK
	LXI	D,FCB	;2689	11 5C 00 	. \ . 
	MVI	B,FNML+1
FNAM0:
	LDAX	D	;268E	1A 	. 
	CPI	'?'	;268F	FE 3F 	. ? 
	JZ	FNERR	;2691	CA 3D 29 	. = ) 
	CPI	'$'	;2694	FE 24 	. $ 
	JZ	FNERR	;2696	CA 3D 29 	. = ) 
	MOV	M,A	;2699	77 	W 
	INX	H	;269A	23 	# 
	INX	D	;269B	13 	. 
	DCR	B	;269C	05 	. 
	JNZ	FNAM0	;269D	C2 8E 26 	. . & 
	RET		;26A0	C9 	. 

;
OMACLB:	;OPEN MACLIB FILE
	LXI	H,FCB	;H,L = FCB
	MVI	M,0	;CURRENT DRIVE
	LXI	D,ACCLEN
	LDAX	D	;A = ACCUM LENGTH
	CPI	9	;LESS THAN 9 CHARACTERS?
	JC	OMAC0
	MVI	A,8	;FORCE TO 8 CHARACTERS
OMAC0:
	MOV	B,A	;LENGTH IN B
	MOV	C,A	;LENGTH IN C
OMAC1:
	INX	D	;D=ACCUM
	INX	H	;H=FCB.FILENAME
	LDAX	D	;GET BYTE FROM ACCUM
	MOV	M,A	;STORE IN FCB.FILENAME
	DCR	C	;MORE BYTES?
	JNZ	OMAC1

	MVI	A,8
	SUB	B
	MOV	C,A
	INR	C	;REMAINING BYTES IN C
;
OMAC2:	;FILL REMAING FILENAME WITH SPACES
	INX	H	;NEXT FILENAME CHARACTER
	DCR	C	;MORE BYTES?
	JZ	OMAC3
	MVI	M,' '
	JMP	OMAC2
;
OMAC3:	;SET FCB FILE TYPE TO 'LIB'
	MVI	M,'L'
	INX	H
	MVI	M,'I'
	INX	H
	MVI	M,'B'
	INX	H
	XRA	A
	MOV	M,A	;ZERO EXTENT
	STA	0007CH	;AND FCB CURRENT RECORD
	CALL	SELL	;26D8	CD 72 26 	. R & 
	LXI	D,FCB	;26DB	11 5C 00 	. \ . 
	JMP	OPEN	;OPEN AND RETURN

L26E1H:
	MVI	A,TRUE	;26E1	3E FF 	> . 
	STA	MLFLG	;26E3	32 5D 30 	2 ] 0 
	LXI	H,BSIZE	;26E6	21 80 00 	. . . 
	SHLD	MBC	;26E9	22 D0 25 	" . % 
	LXI	H,NEXTC	;26EC	21 5B 30 	. [ 0 
	MOV	A,M	;26EF	7E 	~ 
	STA	HDISK+2	;26F0	32 CF 25 	2 . % 
	XRA	A	;26F3	AF 	. 
	MOV	M,A	;26F4	77 	W 
	RET		;26F5	C9 	. 

INIT:
	CALL	SETBF	;26F6	CD 47 26 	. G & 
	LXI	H,TITL	;26F9	21 D3 2C 	. . , 
	CALL	PCON	;26FC	CD 78 26 	. X & 
	MVI	A,038H	;26FF	3E 38 	> 8 
	STA	LINES	;2701	32 B3 25 	2 . % 
	XRA	A	;2704	AF 	. 
	STA	LINEC	;2705	32 B4 25 	2 . % 
	LXI	H,00000H	;2708	21 00 00 	. . . 
	SHLD	L3062	;270B	22 62 30 	" B 0 
	LHLD	FBASE	;270E	2A 06 00 	* . . 
	SHLD	SYMAX	;2711	22 4D 30 	" M 0 
	LXI	H,03100H	;2714	21 00 31 	. . 1 
	SHLD	SBUFF	;2717	22 F6 25 	" . % 
	LXI	D,SSIZE	;271A	11 00 04 	. . . 
	DAD	D	;271D	19 	. 
	SHLD	PBUFF	;271E	22 1B 26 	" . & 
	LXI	D,PSIZE	;2721	11 00 03 	. . . 
	DAD	D	;2724	19 	. 
	SHLD	HBUFF	;2725	22 40 26 	" @ & 
	LXI	D,HSIZE	;2728	11 00 03 	. . . 
	DAD	D	;272B	19 	. 
	INX	H	;272C	23 	# 
	SHLD	SYTOP	;272D	22 4B 30 	" K 0 
	SHLD	SYBASE	;2730	22 54 30 	" T 0 
	JMP	INITP	;INITIALIZE DEFAULT PARAMETERS

S2736H:
	CPI	' '	;2736	FE 20 	.   
	RZ		;2738	C8 	. 
	PUSH	B	;2739	C5 	. 
	PUSH	H	;273A	E5 	. 
	MOV	E,A	;273B	5F 	_ 
	MVI	C,WRITC	;273C	0E 02 	. . 
	CALL	BDOS	;273E	CD 05 00 	. . . 
	POP	H	;2741	E1 	. 
	POP	B	;2742	C1 	. 
	RET		;2743	C9 	. 

L2744H:
	INX	H	;2744	23 	# 
	MOV	A,M	;2745	7E 	~ 
	CALL	S2736H	;2746	CD 36 27 	. 6 ' 
	DCR	C	;2749	0D 	. 
	JNZ	L2744H	;274A	C2 44 27 	. D ' 
	RET		;274D	C9 	. 

S274EH:
	PUSH	H	;274E	E5 	. 
	XCHG		;274F	EB 	. 
	LDA	CDISK	;2750	3A C9 25 	: . % 
	ADI	041H	;2753	C6 41 	. A 
	CALL	S2736H	;2755	CD 36 27 	. 6 ' 
	MVI	A,03AH	;2758	3E 3A 	> : 
	CALL	S2736H	;275A	CD 36 27 	. 6 ' 
	MVI	C,008H	;275D	0E 08 	. . 
	CALL	L2744H	;275F	CD 44 27 	. D ' 
	MVI	A,02EH	;2762	3E 2E 	> . 
	CALL	S2736H	;2764	CD 36 27 	. 6 ' 
	MVI	C,003H	;2767	0E 03 	. . 
	CALL	L2744H	;2769	CD 44 27 	. D ' 
	MVI	A,02DH	;276C	3E 2D 	> - 
	CALL	S2736H	;276E	CD 36 27 	. 6 ' 
	POP	H	;2771	E1 	. 
	JMP	PCON	;2772	C3 78 26 	. X & 

OPEN:
	MVI	C,OPENF	;2775	0E 0F 	. . 
	PUSH	D	;2777	D5 	. 
	CALL	BDOS	;2778	CD 05 00 	. . . 
	CPI	0FFH	;277B	FE FF 	. . 
	POP	D	;277D	D1 	. 
	RNZ	;277E	C0 	. 
	LXI	H,ERROP	;277F	21 E8 2C 	. . , 
	CALL	S274EH	;2782	CD 4E 27 	. N ' 
	JMP	BOOT	;2785	C3 00 00 	. . . 

CLOSE:
	MVI	C,CLOSF	;2788	0E 10 	. . 
	PUSH	D	;278A	D5 	. 
	CALL	BDOS	;278B	CD 05 00 	. . . 
	CPI	0FFH	;278E	FE FF 	. . 
	POP	D	;2790	D1 	. 
	RNZ	;2791	C0 	. 
	LXI	H,ERRCL	;2792	21 6B 2D 	. K - 
	CALL	PCON	;2795	CD 78 26 	. X & 
	JMP	BOOT	;2798	C3 00 00 	. . . 
;
DELETE:
	MVI	C,DELEF	;279B	0E 13 	. . 
	JMP	BDOS	;279D	C3 05 00 	. . . 
;
MAKE:
	MVI	C,MAKEF	;27A0	0E 16 	. . 
	PUSH	D	;27A2	D5 	. 
	CALL	BDOS	;27A3	CD 05 00 	. . . 
	CPI	0FFH	;27A6	FE FF 	. . 
	POP	D	;27A8	D1 	. 
	RNZ	;27A9	C0 	. 
	LXI	H,ERRMA	;27AA	21 FF 2C 	. . , 
	CALL	S274EH	;27AD	CD 4E 27 	. N ' 
	JMP	BOOT	;27B0	C3 00 00 	. . . 
;
NPR:	;RETURN 0 FLAG IF NO PRINT FILE
	LDA	PDISK	;27B3	3A CB 25 	: . % 
	CPI	'Z'-'A'	;Z - NULL FILE?
	RZ
	CPI	'X'-'A'	;X - CONSOLE?
	RZ
	CPI	'P'-'A'	;P - LINE PRINTER?
	RET

S27BFH:
	CPI	TAB	;IF NOT TAB
	JNZ	L27D2H	;PRINT CHARACTER

L27C4H:
	MVI	A,' '	;CONVERT TAB TO SPACES
	CALL	L27D2H
	LDA	PCNT
	ANI	007H
	JNZ	L27C4H
	RET	

L27D2H:
	PUSH	PSW	;27D2	F5 	. 
	MOV	E,A	;27D3	5F 	_ 
	MVI	C,WRITP	;27D4	0E 05 	. . 
	CALL	BDOS	;27D6	CD 05 00 	. . . 
	POP	PSW	;27D9	F1 	. 
	LXI	H,PCNT	;27DA	21 D2 25 	. . % 
	CPI	00AH	;27DD	FE 0A 	. . 
	JNZ	L27E5H	;27DF	C2 E5 27 	. . ' 
	MVI	M,0	;27E2	36 00 	6 . 
	RET		;27E4	C9 	. 

L27E5H:
	CPI	020H	;27E5	FE 20 	.   
	RC		;27E7	D8 	. 
	INR	M	;27E8	34 	4 
	RET		;27E9	C9 	. 
;
INITP:	;INITIALIZE DEFAULT ASSEMBLY PARAMETERS AND DRIVE SELECT
	XRA	A	;27EA	AF 	. 
	STA	PCNT	;27EB	32 D2 25 	2 . % 
	STA	MLFLG	;27EE	32 5D 30 	2 ] 0 
	STA	PARML	;27F1	32 65 30 	2 E 0 
	STA	PARMQ	;27F4	32 64 30 	2 D 0 
	STA	PARMR	;27F7	32 67 30 	2 G 0 
	STA	PARM1	;27FA	32 B5 25 	2 . % 
	LDA	FCB	;27FD	3A 5C 00 	: \ . 
	CPI	' '	;2800	FE 20 	.   
	JZ	FNERR	;2802	CA 3D 29 	. = ) 

	MVI	C,CSEL	;2805	0E 19 	. . 
	CALL	BDOS	;2807	CD 05 00 	. . . 
	LXI	H,CDISK	;280A	21 C9 25 	. . % 
	MOV	M,A	;280D	77 	W 
	INX	H	;280E	23 	# 
	MOV	M,A	;280F	77 	W 
	INX	H	;2810	23 	# 
	MOV	M,A	;2811	77 	W 
	INX	H	;2812	23 	# 
	MOV	M,A	;2813	77 	W 
	INX	H	;2814	23 	# 
	MOV	M,A	;2815	77 	W 
	INX	H	;2816	23 	# 
	MOV	M,A	;2817	77 	W 
	INX	H	;2818	23 	# 
	MVI	A,1	;2819	3E 01 	> . 
	STA	PARMS	;281B	32 5E 30 	2 ^ 0 
	STA	PARMM	;281E	32 5F 30 	2 _ 0 
	LDA	FCB+17	;FCB2 FILENAME
	CPI	'$'	;PARAMETERS INDICATED WITH A $
	JNZ	ISPFCB	;NO PARAMETERS
	LXI	H,BUFF+1;DEFAULT BUFFER AREA
;
L282CH:	;SEARCH BUFF FOR START OF PARAMETER INDICATOR
	MOV	A,M	;282C	7E 	~ 
	INX	H	;282D	23 	# 
	CPI	'$'	;282E	FE 24 	. $ 
	JNZ	L282CH	;2830	C2 2C 28 	. , ( 
;
PPLOOP:	;PROCESS PARAMETER LOOP
	MOV	A,M
	ORA	A
	JZ	ISPFCB	;JUMP IF BYTE IS 00H
	INX	H	;MOVE H,L TO NEXT BYTE
	CPI	' '
	JZ	PPLOOP	;SKIP SPACES
	LXI	D,ADISK
	CPI	'A'	;.ASM SOURCE DRIVE
	JZ	SETDSK
	INX	D
	CPI	'P'	;.PRN DESTINATION DRIVE
	JZ	SETDSK
	INX	D
	CPI	'S'	;.SYM DESTINATION DRIVE
	JZ	SETDSK
	INX	D
	CPI	'H'	;.HEX DESTINATION DRIVE
	JZ	SETDSK
	INX	D
	CPI	'L'	;.LIB SOURCE DRIVE
	JZ	SETDSK
	INX	D	;285E	13 	. 
	MVI	B,7	;285F	06 07 	. . 
	CPI	'*'	;2861	FE 2A 	. * 
	JZ	L2874H	;2863	CA 74 28 	. T ( 
	MVI	B,3	;2866	06 03 	. . 
	CPI	'+'	;2868	FE 2B 	. + 
	JZ	L2874H	;286A	CA 74 28 	. T ( 
	MVI	B,0	;286D	06 00 	. . 
	CPI	'-'	;286F	FE 2D 	. - 
	JNZ	PARERR	;2871	C2 B6 28 	. . ( 
;
L2874H:
	LXI	D,PARMS	;2874	11 5E 30 	. ^ 0 
	MOV	A,M	;H,L IS BYTE AFTER *, + OR -
	CPI	'S'	;+S OR -S
	JZ	SETPAR
	INX	D	;PARAMD
	CPI	'M'	;287E	FE 4D 	. M 
	JZ	SETPAR	;+M OR -M
	LXI	D,PARML
	CPI	'L'	;+L OR -L
	JZ	SETPAR
	LXI	D,PARMQ
	CPI	'Q'	;+Q OR -Q
	JZ	SETPAR
	LXI	D,PARMR
	CPI	'R'	;+R OR -R ???
	JZ	SETPAR
	LXI	D,PARM1
	CPI	'1'	;+1 OR -1
	JNZ	PARERR	;INVALID PARAMETER
;
SETPAR:	;SET PARAMETER
	MOV	A,B	;28A3	78 	X 
	STAX	D	;28A4	12 	. 
	INX	H	;28A5	23 	# 
	JMP	PPLOOP	;28A6	C3 33 28 	. 3 ( 
;
SETDSK:	;STORE DRIVE NUMBER FOR DISK POINTED TO BY D,E
	MOV	A,M
	SUI	'A'	;A=0,B=1,...
	CPI	26	;MAX DRIVE IS 26 (Z)
	JNC	PARERR	;ERROR
	STAX	D	;SAVE DRIVE NUMBER
	INX	H
	JMP	PPLOOP
;
PARERR:	;INVALID PARAMETER
	INX	H
	MVI	M,CR
	LXI	H,ERRPA
	CALL	PCON
	LXI	H,BUFF+1;PARAMETER STRING
	CALL	PCON
	JMP	BOOT	;EXIT BACK TO CP/M
;
ISPFCB:	;INITIALIZE SOURCE AND PRINT FCBS
	LXI	H,SCB	;28C8	21 D3 25 	. . % 
	CALL	FNAME	;28CB	CD 89 26 	. . & 
	LXI	H,PCB	;28CE	21 F8 25 	. . % 
	PUSH	H	;28D1	E5 	. 
	CALL	FNAME	;28D2	CD 89 26 	. . & 
	POP	H	;28D5	E1 	. 
	CALL	NPR	;28D6	CD B3 27 	. . ' 
	JZ	NOPR	;28D9	CA E9 28 	. . ( 
	PUSH	H	;28DC	E5 	. 
	PUSH	H	;28DD	E5 	. 
	CALL	SELP	;28DE	CD 60 26 	. ` & 
	POP	D	;28E1	D1 	. 
	CALL	DELETE	;28E2	CD 9B 27 	. . ' 
	POP	D	;28E5	D1 	. 
	CALL	MAKE	;28E6	CD A0 27 	. . ' 
;
NOPR:	;
	LDA	HDISK	;28E9	3A CD 25 	: . % 
	CPI	019H	;28EC	FE 19 	. . 
	JZ	L2904H	;28EE	CA 04 29 	. . ) 
	LXI	H,HCB	;28F1	21 1D 26 	. . & 
	PUSH	H	;28F4	E5 	. 
	PUSH	H	;28F5	E5 	. 
	CALL	FNAME	;28F6	CD 89 26 	. . & 
	CALL	SELH	;28F9	CD 6C 26 	. L & 
	POP	D	;28FC	D1 	. 
	CALL	DELETE	;28FD	CD 9B 27 	. . ' 
	POP	D	;2900	D1 	. 
	CALL	MAKE	;2901	CD A0 27 	. . ' 
L2904H:
	RET		;2904	C9 	. 

SETUP:	;SETUP INPUT FILE FOR SOURCE PROGRAM
	LXI	H,PAGEN	;2905	21 B0 25 	. . % 
	MVI	M,'0'	;2908	36 30 	6 0 
	INX	H	;290A	23 	# 
	MVI	M,'0'	;290B	36 30 	6 0 
	INX	H	;290D	23 	# 
	MVI	M,'0'	;290E	36 30 	6 0 
	INX	H	;2910	23 	# 
	MVI	A,0FFH	;2911	3E FF 	> . 
	STA	L3066	;2913	32 66 30 	2 F 0 
	LXI	H,0	;2916	21 00 00 	. . . 
	SHLD	PBP	;2919	22 19 26 	" . & 
	LDA	PASS	;291C	3A 4F 30 	: O 0 
	ORA	A	;291F	B7 	. 
	CNZ	L2AF9H	;2920	C4 F9 2A 	. . * 
	LXI	H,SSIZE	;2923	21 00 04 	. . . 
	SHLD	SBP	;2926	22 F4 25 	" . % 
	XRA	A	;2929	AF 	. 
	STA	SCBR	;292A	32 DF 25 	2 . % 
	STA	SCBCR	;292D	32 F3 25 	2 . % 
	STA	DBL	;2930	32 B8 25 	2 . % 
	CALL	SELA	;2933	CD 5A 26 	. Z & 
	LXI	D,SCB	;2936	11 D3 25 	. . % 
	CALL	OPEN	;2939	CD 75 27 	. U ' 
;
	RET		;293C	C9 	. 
;
FNERR:	;FILE NAME ERROR
	LXI	H,ERRFN	;293D	21 12 2D 	. . - 
	CALL	PCON	;2940	CD 78 26 	. X & 
	JMP	BOOT	;2943	C3 00 00 	. . . 
;
;
GCOMP:	;COMPARE D,E AGAINST H,L
	MOV	A,D	;2946	7A 	Z 
	CMP	H	;2947	BC 	. 
	RNZ
	MOV	A,E	;2949	7B 	{ 
	CMP	L	;294A	BD 	. 
	RET		;294B	C9 	. 
;
GNC:	;GET NEXT CHARACTER FROM SOURCE BUFFER OR MACRO BUFFER
	PUSH	B	;294C	C5 	. 
	PUSH	D	;294D	D5 	. 
	PUSH	H	;294E	E5 	. 
	LDA	MLFLG	;294F	3A 5D 30 	: ] 0 
	ORA	A	;2952	B7 	. 
	JZ	L29A2H	;2953	CA A2 29 	. . ) 

	LHLD	MBC	;MACRO BUFFER COUNT
	LXI	D,BSIZE	;COMPARE TO BUFFER SIZE
	CALL	GCOMP	;
	JNZ	L2977H	;JUMP IF MORE BYTES TO GO

	LXI	H,0	;RESET BUFFER COUNT
	SHLD	MBC	;
	CALL	SELL	;SELECT LIBRARY DRIVE
	MVI	C,READF	;READ ANOTHER BUFFER
	LXI	D,FCB	;
	CALL	BDOS	;
	ORA	A	;
	JNZ	L2989H	;ERROR?
L2977H:
	LHLD	MBC	;2977	2A D0 25 	* . % 
	INX	H	;297A	23 	# 
	SHLD	MBC	;297B	22 D0 25 	" . % 
	DCX	H	;297E	2B 	+ 
	LXI	D,BUFF	;297F	11 80 00 	. . . 
	DAD	D	;2982	19 	. 
	MOV	A,M	;2983	7E 	~ 
	CPI	EOF
	JNZ	GNC4	;JUMP IF NOT END OF FILE
;
L2989H:	;END OF MACLIB FILE
	LDA	L2EA3H	;2989	3A A3 2E 	: . . 
	ORA	A	;298C	B7 	. 
	STA	MLFLG	;RESET MLFLG
	JZ	L29A2H	;2990	CA A2 29 	. . ) 
	CALL	SELL	;2993	CD 72 26 	. R & 
	LXI	D,FCB	;2996	11 5C 00 	. \ . 
	LXI	H,ERRUM	;2999	21 7E 2D 	. ~ - 
	CALL	S274EH	;299C	CD 4E 27 	. N ' 
	JMP	BOOT	;299F	C3 00 00 	. . . 
L29A2H:
	LHLD	SBP	;29A2	2A F4 25 	* . % 
	LXI	D,SSIZE	;29A5	11 00 04 	. . . 
	CALL	GCOMP	;29A8	CD 46 29 	. F ) 
	JNZ	GNC3	;29AB	C2 F0 29 	. . ) 
;
;	READ ANOTHER BUFFER
	CALL	SELA
	LXI	H,0
	SHLD	SBP
	MVI	B,NSB	;NUMBER OF SOURCE BUFFERS
	LHLD	SBUFF
GNC0:	;READ 128 BYTES
	PUSH	B	;SAVE BUFFER jjCOUNT
	PUSH	H	;SAVE BUFFER ADDRESS
	XCHG
	CALL	SDMA	;SET READ BUFFER ADDRESS
	MVI	C,READF
	LXI	D,SCB
	CALL	BDOS	;PERFORM THE READ
	POP	H	;RESTORE SBUFF ADDRESS
	LXI	D,128	;NEXT BUFFER
	DAD	D	;H,L+=128
	POP	B	;RESTORE COUNT
	ORA	A	;NON ZERO BDOS RETURN VALUE?
	JNZ	GNC1
;	NORMAL READ OCCURRED
	DCR	B
	JNZ	GNC0
	JMP	GNC2
GNC1:
	CPI	3	;ALLOW 0,1,2
	JNC	FRERR	;FILE READ ERROR
	DCR	B	;LAST BUFFER?
	JZ	GNC2
	MVI	C,128
GNCE:
	MVI	M,EOF	;STORE END OF FILE CHARACTER
	INX	H
	DCR	C
	JNZ	GNCE	;FILL CURRENT BUFFER WITH EOF'S
GNC2:
	CALL	SETBF	;29ED	CD 47 26 	. G & 

GNC3:
	LHLD	SBUFF
	XCHG
	LHLD	SBP
	PUSH	H	;SAVE CURRENT SBP
	INX	H	;READY FOR NEXT READ
	SHLD	SBP
	POP	H	;RESTORE PREVIOUS SBP
	DAD	D	;ABSOLUTE ADDRESS OF CHARACTER
	MOV	A,M	;GET IT
GNC4:
	POP	H
	POP	D
	POP	B
	ANI	07FH	;STRIP HIGH BIT
	RET
FRERR:
	LXI	H,ERRFR
	CALL	PCON
	JMP	BOOT
;
PNC:	;SAME AT PNCF, BUT ENVIRONMENT IS SAVED FIRST
	PUSH	B
;       CHECK FOR CONSOLE OUTPUT / NO OUTPUT
	MOV	B,A	;SAVE CHARACTER
	LDA	PDISK	;Z OR X?
	CPI	'Z'-'A'
	JZ	PNRET
	CPI	'X'-'A'
	JNZ	PNG0
	MOV	A,B	;RECOVER CHARACTER FOR CON OUT
	CALL	PCHAR
	JMP	PNRET
;
;       NOT X OR Z, SO PRINT IT
PNG0:	PUSH	D
	PUSH	H
	CPI	'P'-'A'	;LINE PRINTER?
	MOV	A,B
	JNZ	L2A32H
	CALL	S27BFH
	JMP	L2A35H
L2A32H:
	CALL	PNCF
L2A35H:
	POP	H
	POP	D
PNRET:
	POP	B
	RET	
;
PNCF:	;PRINT NEXT CHARACTER
	LHLD	PBP
	XCHG	
	LHLD	PBUFF
	DAD	D
	MOV	M,A
	XCHG	
	INX	H
	SHLD	PBP
	XCHG	
	LXI	H,PSIZE
	CALL	GCOMP
	RNZ	
	CALL	SELP
	LXI	H,0
	SHLD	PBP
	LHLD	PBUFF
	LXI	D,PCB
	MVI	B,NPB
WBUFF:
	MOV	A,M
	CPI	EOF
	JZ	L2A85H	;DO NOT PRINT
	PUSH	B
	PUSH	D
	PUSH	H
	XCHG	
	CALL	SDMA
	POP	H
	LXI	D,BUFF
	DAD	D
	POP	D
	PUSH	D
	PUSH	H
	MVI	C,WRITF
	CALL	BDOS
	POP	H
	POP	D
	POP	B
	ORA	A
	JNZ	FWERR
	DCR	B
	JNZ	WBUFF

L2A85H:
	CALL	SETBF	;SET DMA TO BUFF
	RET	

	JMP	WBUFF
FWERR:
	LXI	H,ERRFW
	CALL	PCON
	JMP	EORPC
PNB:
	PUSH	B
	PUSH	D
	PUSH	H
	CALL	PNBF
	POP	H
	POP	D
	POP	B
S2A9EH:
	RET	

PNBF:
	LHLD	HBP
	XCHG	
	LHLD	HBUFF
	DAD	D
	MOV	M,A
	XCHG	
	INX	H
	SHLD	HBP
	XCHG	
	LXI	H,HSIZE
	CALL	GCOMP
	RNZ	
	CALL	SELH
	LXI	H,0
	SHLD	HBP
	LHLD	HBUFF
	LXI	D,HCB
	MVI	B,NHB
	JMP	WBUFF
;
PCHAR:	;PRINT CHARACTER IN REGISTER A
	PUSH	B
	PUSH	D
	PUSH	H
	MVI	C,WRITC
	MOV	E,A
	CALL	BDOS
	POP	H
	POP	D
	POP	B
	RET	
;
S2AD6H:	;INCREMENT PAGE NUMBER
	LXI	H,PAGEN+2
	MVI	C,3	;ADD 3
L2ADBH:
	MOV	A,M	;GET DIGIT
	INR	A	;INCREMENT BY 1
	MOV	M,A	;STORE DIGIT
	CPI	'9'+1
	JC	L2AEAH	;IF '0'-'9' PRINT DIGITS
	MVI	M,'0'	;SET TO '0'
	DCX	H
	DCR	C
	JNZ	L2ADBH	;INCREMENT NEXT DIGIT
;
L2AEAH:	;PRINT PAGE NUMBER
	LXI	H,PAGEN
	MVI	C,3
;
L2AEFH:	;PRINT STRING AT H,L LENGTH IN C
	MOV	A,M
	CALL	PNC
	INX	H
	DCR	C
	JNZ	L2AEFH
	RET	
;
L2AF9H:
	LDA	LINES
	ORA	A
	RZ	
	MVI	A,FF
	CALL	PNC
	XRA	A
	STA	LINEC
	LHLD	L3062
	MOV	A,L
	ORA	H
	RZ	
	LXI	H,TITL
L2B10H:
	MOV	A,M
	CPI	CR
	JZ	L2B1DH
	CALL	PNC
	INX	H
	JMP	L2B10H
L2B1DH:
	MVI	A,TAB
	CALL	PNC
	MVI	A,'#'
	CALL	PNC
	CALL	S2AD6H
	MVI	A,TAB
	CALL	PNC
	LHLD	L3062
L2B32H:
	MOV	A,M
	ORA	A
	JZ	L2B3EH
	CALL	PNC
	INX	H
	JMP	L2B32H
L2B3EH:
	MVI	A,CR
	CALL	PNC
	MVI	A,LF
	CALL	PNC
	MVI	A,LF
	JMP	PNC
L2B4DH:
	MOV	A,L
	STA	LINES
	LXI	H,LINEC
	SUB	M
	RNC 	
	JMP	L2AF9H
;
WOCHAR:	;WRITE CHARACTER IN REG-A WITH REFLECT AT CONSOLE IF ERROR
	MOV	C,A	;SAVE THE CHAR
	CALL	PNC	;PRINT THE CHAR
	LDA	CBUFF
	CPI	' '
	RZ	
	LDA	PASS
	CPI	2
	RZ	
	LDA	PDISK
	CPI	017H
	RZ	
	MOV	A,C
	CALL	PCHAR
	RET	

L2B74H:
	LDA	PARM1
	LXI	H,PASS
	ORA	M
	JNZ	L2B95H
	LDA	PARML	;SOURCE DISK FOR .LIB FILES
	LXI	H,MLFLG
	ANA	M
	JNZ	L2BE3H
	MOV	A,M
	ORA	A
	JZ	L2C10H
	LDA	CBUFF
	CPI	' '
	JZ	L2C10H
L2B95H:
	LXI	H,CBUFF
	MOV	A,M
	CPI	' '
	JNZ	L2BE3H
	LDA	L3066
	ORA	A
	JZ	L2C10H
	LDA	CBUFF+5
	CPI	'+'
	JNZ	L2BE3H
	LDA	PARMM
	ORA	A
	JZ	L2C10H
	CPI	3
	JZ	L2BE3H
	LDA	CBUFF+6
	CPI	'#'
	JZ	L2C10H
	LDA	CBUFF+1
	CPI	' '
	JZ	L2C10H
	LDA	PARMM
	DCR	A
	JZ	L2BE3H
	LXI	D,00010H
L2BD3H:
	DCX	D
	LXI	H,CBUFF
	DAD	D
	MOV	A,M
	CPI	' '
	JZ	L2BD3H
	INX	D
	LXI	H,CBP
	MOV	M,E
L2BE3H:
	LXI	H,LINEC
	PUSH	H
	MOV	A,M
	LXI	H,LINES
	SUB	M
	CNC	L2AF9H
	POP	H
	INR	M
	LDA	CBP
	LXI	H,CBUFF
L2BF7H:
	ORA	A
	JZ	L2C06H
	MOV	B,A
	MOV	A,M
	CALL	WOCHAR
	INX	H
	MOV	A,B
	DCR	A
	JMP	L2BF7H
;
L2C06H:	;SEND CR LF
	MVI	A,CR
	CALL	WOCHAR
	MVI	A,LF
	CALL	WOCHAR
;
L2C10H:	;CLEAR CBUFF
	XRA	A
	STA	CBP
	LXI	H,CBUFF
	MVI	A,CBMAX
L2C19H:
	MVI	M,' '
	INX	H
	DCR	A
	JNZ	L2C19H
	RET	

L2C21H:
	MOV	B,A
	LXI	H,CBUFF
	MOV	A,M
	CPI	' '
	RNZ
	MOV	M,B
	RET	
L2C2BH:
	CALL	NPR
	RZ
L2C2FH:
	LHLD	PBP
	MOV	A,L
	ORA	H
	JZ	L2C3FH
	MVI	A,EOF
	CALL	PNC
	JMP	L2C2FH
L2C3FH:
	CALL	SELP
	LXI	D,PCB
	CALL	CLOSE
	RET	
L2C49H:
	LDA	PARMS
	CPI	003H
	JZ	L2AF9H
	CALL	L2C2BH
	LXI	H,PCBT
	MVI	M,'S'
	INX	H
	MVI	M,'Y'
	INX	H
	MVI	M,'M'
	INX	H
	XRA	A
	MOV	M,A
	LXI	H,PCBR
	MOV	M,A
	LDA	SDISK
	STA	PDISK
	LXI	H,0
	SHLD	PBP
	CALL	NPR
	JZ	L2AF9H
	XRA	A
	STA	LINES
	CALL	SELP
	LXI	D,PCB
	PUSH	D
	CALL	DELETE
	POP	D
	CALL	MAKE
	RET	
L2C8BH:
	CALL	L2C2BH
	LDA	HDISK
	CPI	019H
	JZ	EORPC
	LDA	DBL
	ORA	A
	CNZ	WHEX
	LHLD	FPC
	SHLD	BPC
	CALL	WHEX
EOR1:
	LHLD	HBP
	MOV	A,L
	ORA	H
	JZ	EORPC
	MVI	A,EOF
	CALL	PNB
	JMP	EOR1
EORPC:
	NOP	
	NOP	
	NOP	
	LDA	HDISK
	CPI	'Z'-'A'
	JZ	EORHC
	CALL	SELH
	LXI	D,HCB
	CALL	CLOSE
EORHC:
	LXI	H,ENDA
	CALL	PCON
	JMP	BOOT
TITL:
	DB	'CP/M MACRO ASSEM 2.0',CR
ERROP:
	DB	'NO SOURCE FILE PRESENT',CR
ERRMA:
	DB	'NO DIRECTORY SPACE',CR
ERRFN:
        DB	'SOURCE FILE NAME ERROR',CR
ERRPA:
	DB	'INVALID PARAMETER:',CR
ERRFR:
	DB	'SOURCE FILE READ ERROR',CR
ERRFW:
	DB	'OUTPUT FILE WRITE ERROR',CR
ERRCL:
	DB	'CANNOT CLOSE FILES',CR
ERRUM:
	DB	'UNBALANCED MACRO LIB',CR
ENDA:
	DB	'END OF ASSEMBLY',CR
;
DHEX:	;DATA TO HEX BUFFER (BYTE IN REG-A)
	PUSH	B
	MOV	B,A	;HOLD CHARACTER FOR Z TEST
	LDA	HDISK
	CPI	'Z'-'A'
	MOV	A,B	;RECOVER CHARACTER
	JZ	DHRET
	PUSH	D	;ENVIRONMENT SAVED
	PUSH	PSW	;SAVE DATA BYTE
	LXI	H,DBL	;CURRENT LENGTH
	MOV	A,M	;TO A
	ORA	A	;ZERO?
	JZ	DHEX3
;
;LENGTH NOT ZERO, MAY BE FULL BUFFER
	CPI	16
	JC	DHEX1	;BR IF LESS THAN 16 BYTES
;BUFFER FULL, DUMP IT
	CALL	WHEX	;DBL = 0 UPON RETURN
	JMP	DHEX3	;SET BPC AND DATA BYTE
;
DHEX1:	;PARTIAL BUFFER IN PROGRESS, CHECK FOR SEQUENTIAL BYTE LOAD
	LHLD	FPC
	XCHG	
	LHLD	BPC	;BASE PC IN H,L
	MOV	C,A	;CURRENT BUFFER LENGTH
	MVI	B,0	;IS IN B,C
	DAD	B	;BPC+DBL TO H,L
	MOV	A,E	;READY FOR COMPARE
	CMP	L	;EQUAL?
	JNZ	DHEX2	;BR IF NOT
	MOV	A,D	;CHECK HIGH ORDER BYTE
	CMP	H
	JZ	DHEX4	;BR IF SAME ADDRESS
;
DHEX2:	;NON SEQUENTIAL ADDRESS, DUMP AND CHANGE BASE ADDRESS
	CALL	WHEX
DHEX3:	;SET NEW BASE
	LHLD	FPC
	SHLD	BPC
;
DHEX4:	;STORE DATA BYTE AND INC DBL
	LXI	H,DBL
	MOV	E,M	;LENGTH TO REG-E
	INR	M	;DBL=DBL+1
	MVI	D,0	;HIGH ORDER ZERO FOR DOUBLE ADD
	LXI	H,DBUFF
	DAD	D	;DBUFF+DBL TO H,L
	POP	PSW	;RESTORE DATA BYTE
	MOV	M,A	;INTO DATA BUFFER
	POP	D
DHRET:	POP	B	;ENVIRONMENT RESTORED
	RET	
;
WRC:	;WRITE CHARACTER WITH CHECKSUM IN D
	PUSH	PSW
	RRC	
	RRC	
	RRC	
	RRC	
	ANI	00FH
	CALL	HEXC	;OUTPUT HEX CHARACTER
	POP	PSW	;RESTORE BYTE
	PUSH	PSW	;SAVE A VERSION
	ANI	00FH
	CALL	HEXC	;WRITE LOW NIBBLE
	POP	PSW	;RESTORE BYTE
	ADD	D	;COMPUTE CHECKSUM
	MOV	D,A	;SAVE CHECKSUM
	RET
;
HEXC:	;WRITE CHARACTER
	ADI	090H
	DAA	
	ACI	040H
	DAA	
	JMP	PNB	;PUT BYTE
;
WHEX:	;WRITE CURRENT HEX BUFFER
	MVI	A,':'	;RECORD HEADER
	CALL	PNB	;PUT BYTE
	LXI	H,DBL	;RECORD LENGTH ADDRESS
	MOV	E,M	;LENGTH TO REG-E
	XRA	A	;ZERO TO REG-A
	MOV	D,A	;CLEAR CHECKSUM
	MOV	M,A	;LENGTH IS ZEROED FOR NEXT WRITE
	LHLD	BPC	;BASE ADDRESS FOR RECORD
	MOV	A,E	;LENGTH TO A
	CALL	WRC	;WRITE HEX VALUE
	MOV	A,H	;HIGH ORDER BASE ADDRESS
	CALL	WRC	;WRITE HO BYTE
	MOV	A,L	;LOW ORDER BASE ADDRESS
	CALL	WRC	;WRITE LO BYTE
	XRA	A	;ZERO TO A
	CALL	WRC	;WRITE RECORD TYPE 00
	MOV	A,E	;CHECK FOR LENGTH 0
	ORA	A
	JZ	WHEX1
;
;	NON - ZERO, WRITE DATA BYTES
	LXI	H,DBUFF
WHEX0:
	MOV	A,M	;GET BYTE
	INX	H
	CALL	WRC	;WRITE DATA BYTE
	DCR	E	;END OF BUFFER?
	JNZ	WHEX0
;
WHEX1:	;END OF DATA BYTES, WRITE CHECKSUM
	XRA	A
	SUB	D	;COMPUTE CHECKSUM
	CALL	WRC
;
;	SEND CRLF AT END OF RECORD
	MVI	A,CR
	CALL	PNB
	MVI	A,LF
	CALL	PNB
	RET

;;
;;
;;
	ORG	2E83H

RSIZE	EQU	32
RBUFF:	DS	RSIZE	;2EA2	FF 	. 
L2EA3H:
	DS	1	;2EA3	FF 	. 
L2EA4H:
	DS	1	;2EA4	FF 	. 
L2EA5H:
	DS	1	;2EA5	FF 	. 
L2EA6H:
	DS	1	;2EA6	FF 	. 
L2EA7H:
	DS	1	;2EA7	FF 	. 
L2EA8H:
	DS	2	;2EA8	FF 	. 
L2EAAH:
	DS	2	;2EAA	FF 	. 
L2EACH:
	DS	8	;2EAC	FF 	. 
L2EB4H:
	DS	32	;2EB4	FF 	. 
L2ED4H:
	DS	32	;2ED4	FF 	. 
L2EF4H:
	DS	32
L2F14H:
	DS	16
L2F24H:
	DS	32
L2F44H:
	DS	16
L2F54H:
	DS	16
L2F64H:
	DS	1
L2F65H:
	DS	1
L2F66H:
	DS	1
L2F67H:
	DS	1
L2F68H:
	DS	36
;	DS	152	;2EF4

CBMAX:  EQU     120     ;CONSOLE OUTPUT BUFFER SIZE
CBUFF:	DS	CBMAX	;CONSOLE OUTPUT BUFFER

ENDAS1M	EQU	($ AND 0FF00H) + 100H

	ORG	3000H

	DS	2
	DS	2
CBP:	DB	1	;CBUFF INDEX

;
;	SCANNER PARAMETERS
TOKEN:	DS	1	;CURRENT TOKEN EQU	03005H
VALUE:	DS	2	;BINARY VALUE FOR NUMBERS	EQU	03006H
ACCLEN:	DS	1	;ACCUMULATOR LENGTH	EQU	03008H
ACMAX	EQU	64	;LENGTH OF ACCUMULATOR
ACCUM:	DS	ACMAX	;ACCUMULATOR (MUST FOLLOW ACCLEN)	EQU	03009H
;
;	OPERAND EXPRESSION EVALUATOR PARAMETERS
EVALUE:	DS	2	;VALUE OF EXPRESSION AFTER EVALUATION	EQU	ACCUM+ACMAX
;
;	SYMBOL TABLE MODULE PARAMETERS
SYTOP:	DW	ENDMAC	;FIRST LOCATION AVAILABLE FOR SYMBOL TABLE
SYMAX:	DS	2	;LAST AVAILABLE LOCATION FOR SYMBOL TABLE
;
;	MISCELLANEOUS DATA AREAS
PASS:	DS	1	;PASS # 0,1	EQU	0304FH
FPC:	DS	2	;FILL ADDRESS FOR NEXT HEX RECORD
ASPC:	DS	2	;ASSEMBLER'S PSEUDO PC
SYBASE:	DW	ENDMAC	;SYMBOL TABLE BASE
SYADR:	DS	2	;CURRENT SYMBOL BASE
L3058:	DS	2	;NEW SYMBOL TABLE
L305A:	DS	1	;305A
NEXTC:	DS	1	;305B
L305C:	DS	1	;LOOK AHEAD CHAR
MLFLG:	DS	1	;MACLIB FLAG
PARMS:	DS	1	;305E
PARMM:	DS	1	;305F
L3060:	DS	2	;3060
L3062:	DS	2	;3062
PARMQ:	DS	1	;3064
PARML:	DS	1	;3065
L3066:	DS	1	;3066
PARMR:	DS	1	;3067


ENDMAC	EQU	($ AND 0FF00H) + 100H
